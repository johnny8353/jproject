<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd"
       default-lazy-init="false">

    <description>Spring公共配置</description>
    <context:component-scan base-package="com.hj.cobar"></context:component-scan>
    
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	   <property name="location">
	     <value>application.development.properties</value>
	   </property>
	</bean>
    
<!-- 配置数据源开始 -->
    <bean id="dataSources" class="com.alibaba.cobar.client.datasources.DefaultCobarDataSourceService">
		<property name="dataSourceDescriptors">
			<set>
				<bean class="com.alibaba.cobar.client.datasources.CobarDataSourceDescriptor">
					<property name="identity" value="partition0"/>
					<property name="targetDataSource" ref="dataSource0"/>
					<property name="targetDetectorDataSource" ref="dataSource0"/>
				</bean>
				<bean class="com.alibaba.cobar.client.datasources.CobarDataSourceDescriptor">
					<property name="identity" value="partition1"/>
					<property name="targetDataSource" ref="dataSource1"/>
					<property name="targetDetectorDataSource" ref="dataSource1"/>
				</bean>
				<bean class="com.alibaba.cobar.client.datasources.CobarDataSourceDescriptor">
					<property name="identity" value="partition2"/>
					<property name="targetDataSource" ref="dataSource2"/>
					<property name="targetDetectorDataSource" ref="dataSource2"/>
				</bean>
			</set>
		</property>
		<property name="haDataSourceCreator">
			<bean class="com.alibaba.cobar.client.datasources.ha.FailoverHotSwapDataSourceCreator">
				<property name="detectingSql" value="update cobarha set timeflag=CURRENT_TIMESTAMP()"/>
			</bean>
		</property>
	</bean>
	
	<!-- 数据源0 -->
	<bean id="dataSource0" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <property name="url" value="${jdbc0.url}" />
	    <property name="username" value="${jdbc0.username}" />
	    <property name="password" value="${jdbc0.password}" />
	    <property name="filters" value="config" />
	    <property name="maxActive" value="5" />
	    <property name="initialSize" value="5" />
	    <property name="maxWait" value="1" />
	    <property name="minIdle" value="5" />
	    <property name="timeBetweenEvictionRunsMillis" value="3000" />
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	    <!-- <property name="connectionProperties" value="config.decrypt=true" /> -->
	</bean>
	
	<!-- 数据源1 -->
	<bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <property name="url" value="${jdbc1.url}" />
	    <property name="username" value="${jdbc1.username}" />
	    <property name="password" value="${jdbc1.password}" />
	    <property name="filters" value="config" />
	    <property name="maxActive" value="5" />
	    <property name="initialSize" value="5" />
	    <property name="maxWait" value="1" />
	    <property name="minIdle" value="5" />
	    <property name="timeBetweenEvictionRunsMillis" value="3000" />
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>
	
	<!-- 数据源2 -->
	<bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <property name="url" value="${jdbc2.url}" />
	    <property name="username" value="${jdbc2.username}" />
	    <property name="password" value="${jdbc2.password}" />
	    <property name="filters" value="config" />
	    <property name="maxActive" value="5" />
	    <property name="initialSize" value="5" />
	    <property name="maxWait" value="1" />
	    <property name="minIdle" value="5" />
	    <property name="timeBetweenEvictionRunsMillis" value="3000" />
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	</bean>
<!-- 配置数据源结束 -->	
    
<!-- 配置路由规则开始 -->
    <bean id="hashFunction" class="com.hj.cobar.dao.router.HashFunction"></bean>
	<bean id="internalRouter"
		class="com.alibaba.cobar.client.router.config.CobarInteralRouterXmlFactoryBean">
		<!-- functionsMap是在使用自定义路由规则函数的时候使用 -->
		<property name="functionsMap">
			<map>
				<entry key="hash" value-ref="hashFunction"></entry>
			</map>
	    </property>
		<property name="configLocations">
			<list>
				<value>classpath:/dbRule/sharding-rules-on-namespace.xml</value>
			</list>
		</property>
	</bean>
<!-- 配置路由规则结束 -->  
  
  	<!-- 事务配置 -->
    <bean id="transactionManager" class="com.alibaba.cobar.client.transaction.MultipleDataSourcesTransactionManager">
        <property name="cobarDataSourceService" ref="dataSources"/>
    </bean>
    
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    
    <!--  iBatis SQL map定义。                                                    -->
    <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
    	<!-- 这里配置的dataSource0为默认的数据源,如果找不到数据库的话则到该数据源中查找 -->
   	 	<property name="dataSource" ref="dataSource0" />  
        <property name="configLocation">
            <value>classpath:/sqlmap-config.xml</value>
        </property>
    </bean>
    
    <!-- 工程里一定要使用此工程模板，不能再使用ibatis原生的api，不然有的情况会不经过cobar的过滤 -->
 	<bean id="sqlMapClientTemplate" class="com.alibaba.cobar.client.CobarSqlMapClientTemplate">
		<property name="sqlMapClient" ref="sqlMapClient" />
		<property name="cobarDataSourceService" ref="dataSources" />
		<property name="router" ref="internalRouter" />
		<property name="sqlAuditor">
			<bean class="com.alibaba.cobar.client.audit.SimpleSqlAuditor" />
		</property>
		<property name="profileLongTimeRunningSql" value="true" />
		<property name="longTimeRunningSqlIntervalThreshold" value="3600000" />
	</bean>
    
    
    
    
    
</beans>