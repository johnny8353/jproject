
常用命令
1）连接操作命令
quit：关闭连接（connection）
auth：简单密码认证
help cmd： 查看cmd帮助，例如：help quit

2）持久化
save：将数据同步保存到磁盘
bgsave：将数据异步保存到磁盘
lastsave：返回上次成功将数据保存到磁盘的Unix时戳
shundown：将数据同步保存到磁盘，然后关闭服务

3）远程服务控制
info：提供服务器的信息和统计
monitor：实时转储收到的请求
slaveof：改变复制策略设置
config：在运行时配置Redis服务器

4）对value操作的命令
exists(key)：确认一个key是否存在
del(key)：删除一个key
type(key)：返回值的类型
keys(pattern)：返回满足给定pattern的所有key
randomkey：随机返回key空间的一个
keyrename(oldname, newname)：重命名key
dbsize：返回当前数据库中key的数目
expire：设定一个key的活动时间（s）
ttl：获得一个key的活动时间
select(index)：按索引查询
move(key, dbindex)：移动当前数据库中的key到dbindex数据库
flushdb：删除当前选择数据库中的所有key
flushall：删除所有数据库中的所有key

5）String
set(key, value)：给数据库中名称为key的string赋予值value
get(key)：返回数据库中名称为key的string的value
getset(key, value)：给名称为key的string赋予上一次的value
mget(key1, key2,…, key N)：返回库中多个string的value
setnx(key, value)：添加string，名称为key，值为value
setex(key, time, value)：向库中添加string，设定过期时间time
mset(key N, value N)：批量设置多个string的值
msetnx(key N, value N)：如果所有名称为key i的string都不存在
incr(key)：名称为key的string增1操作
incrby(key, integer)：名称为key的string增加integer
decr(key)：名称为key的string减1操作
decrby(key, integer)：名称为key的string减少integer
append(key, value)：名称为key的string的值附加value
substr(key, start, end)：返回名称为key的string的value的子串

6）List 
rpush(key, value)：在名称为key的list尾添加一个值为value的元素
lpush(key, value)：在名称为key的list头添加一个值为value的 元素
llen(key)：返回名称为key的list的长度
lrange(key, start, end)：返回名称为key的list中start至end之间的元素
ltrim(key, start, end)：截取名称为key的list
lindex(key, index)：返回名称为key的list中index位置的元素
lset(key, index, value)：给名称为key的list中index位置的元素赋值
lrem(key, count, value)：删除count个key的list中值为value的元素
lpop(key)：返回并删除名称为key的list中的首元素
rpop(key)：返回并删除名称为key的list中的尾元素
blpop(key1, key2,… key N, timeout)：lpop命令的block版本。
brpop(key1, key2,… key N, timeout)：rpop的block版本。
rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，

7）Set
sadd(key, member)：向名称为key的set中添加元素member
srem(key, member) ：删除名称为key的set中的元素member
spop(key) ：随机返回并删除名称为key的set中一个元素
smove(srckey, dstkey, member) ：移到集合元素
scard(key) ：返回名称为key的set的基数
sismember(key, member) ：member是否是名称为key的set的元素
sinter(key1, key2,…key N) ：求交集
sinterstore(dstkey, (keys)) ：求交集并将交集保存到dstkey的集合
sunion(key1, (keys)) ：求并集
sunionstore(dstkey, (keys)) ：求并集并将并集保存到dstkey的集合
sdiff(key1, (keys)) ：求差集
sdiffstore(dstkey, (keys)) ：求差集并将差集保存到dstkey的集合
smembers(key) ：返回名称为key的set的所有元素
srandmember(key) ：随机返回名称为key的set的一个元素

8）Hash
hset(key, field, value)：向名称为key的hash中添加元素field
hget(key, field)：返回名称为key的hash中field对应的value
hmget(key, (fields))：返回名称为key的hash中field i对应的value
hmset(key, (fields))：向名称为key的hash中添加元素field 
hincrby(key, field, integer)：将名称为key的hash中field的value增加integer
hexists(key, field)：名称为key的hash中是否存在键为field的域
hdel(key, field)：删除名称为key的hash中键为field的域
hlen(key)：返回名称为key的hash中元素个数
hkeys(key)：返回名称为key的hash中所有键
hvals(key)：返回名称为key的hash中所有键对应的value
hgetall(key)：返回名称为key的hash中所有的键（field）及其对应的value


Redis客户端命令
Redis数据类型相关的命令，如String、List、Set、Hashes和Sorted-Set。这些命令都具有一个共同点，即所有的操作都是针对与Key关联的Value的。
主要讲述与Key相关的Redis命令。学习这些命令对于学习Redis是非常重要的基础，也是能够充分挖掘Redis潜力的利器。
命令列表

命令事例
1. KEYS/RENAME/DEL/EXISTS/MOVE/RENAMENX:
	#在Shell命令行下启动Redis客户端工具。
	/> redis-cli
	#清空当前选择的数据库，以便于对后面示例的理解。
	redis 127.0.0.1:6379> flushdb
	OK
	#添加String类型的模拟数据。
	redis 127.0.0.1:6379> set mykey 2
	OK
	redis 127.0.0.1:6379> set mykey2 "hello"
	OK
	#添加Set类型的模拟数据。
	redis 127.0.0.1:6379> sadd mysetkey 1 2 3
	(integer) 3
	#添加Hash类型的模拟数据。
	redis 127.0.0.1:6379> hset mmtest username "stephen"
	(integer) 1
	#根据参数中的模式，获取当前数据库中符合该模式的所有key，从输出可以看出，该命令在执行时并不区分与Key关联的Value类型。
	redis 127.0.0.1:6379> keys my*
	1) "mysetkey"
	2) "mykey"
	3) "mykey2"
	#删除了两个Keys。
	redis 127.0.0.1:6379> del mykey mykey2
	(integer) 2
	#查看一下刚刚删除的Key是否还存在，从返回结果看，mykey确实已经删除了。
	redis 127.0.0.1:6379> exists mykey
	(integer) 0
	#查看一下没有删除的Key，以和上面的命令结果进行比较。
	redis 127.0.0.1:6379> exists mysetkey
	(integer) 1
	#将当前数据库中的mysetkey键移入到ID为1的数据库中，从结果可以看出已经移动成功。
	redis 127.0.0.1:6379> move mysetkey 1
	(integer) 1
	#打开ID为1的数据库。
	redis 127.0.0.1:6379> select 1
	OK
	#查看一下刚刚移动过来的Key是否存在，从返回结果看已经存在了。
	redis 127.0.0.1:6379[1]> exists mysetkey
	(integer) 1
	#在重新打开ID为0的缺省数据库。
	redis 127.0.0.1:6379[1]> select 0
	OK
	#查看一下刚刚移走的Key是否已经不存在，从返回结果看已经移走。
	redis 127.0.0.1:6379> exists mysetkey
	(integer) 0
	#准备新的测试数据。    
	redis 127.0.0.1:6379> set mykey "hello"
	OK
	#将mykey改名为mykey1
	redis 127.0.0.1:6379> rename mykey mykey1
	OK
	#由于mykey已经被重新命名，再次获取将返回nil。
	redis 127.0.0.1:6379> get mykey
	(nil)
	#通过新的键名获取。
	redis 127.0.0.1:6379> get mykey1
	"hello"
	#由于mykey已经不存在了，所以返回错误信息。
	redis 127.0.0.1:6379> rename mykey mykey1
	(error) ERR no such key
	#为renamenx准备测试key
	redis 127.0.0.1:6379> set oldkey "hello"
	OK
	redis 127.0.0.1:6379> set newkey "world"
	OK
	#由于newkey已经存在，因此该命令未能成功执行。
	redis 127.0.0.1:6379> renamenx oldkey newkey
	(integer) 0
	#查看newkey的值，发现它也没有被renamenx覆盖。
	redis 127.0.0.1:6379> get newkey
	"world"


2. PERSIST/EXPIRE/EXPIREAT/TTL:    
	#为后面的示例准备的测试数据。
	redis 127.0.0.1:6379> set mykey "hello"
	OK
	#将该键的超时设置为100秒。
	redis 127.0.0.1:6379> expire mykey 100
	(integer) 1
	#通过ttl命令查看一下还剩下多少秒。
	redis 127.0.0.1:6379> ttl mykey
	(integer) 97
	#立刻执行persist命令，该存在超时的键变成持久化的键，即将该Key的超时去掉。
	redis 127.0.0.1:6379> persist mykey
	(integer) 1
	#ttl的返回值告诉我们，该键已经没有超时了。
	redis 127.0.0.1:6379> ttl mykey
	(integer) -1
	#为后面的expire命令准备数据。
	redis 127.0.0.1:6379> del mykey
	(integer) 1
	redis 127.0.0.1:6379> set mykey "hello"
	OK
	#设置该键的超时被100秒。
	redis 127.0.0.1:6379> expire mykey 100
	(integer) 1
	#用ttl命令看一下当前还剩下多少秒，从结果中可以看出还剩下96秒。
	redis 127.0.0.1:6379> ttl mykey
	(integer) 96
	#重新更新该键的超时时间为20秒，从返回值可以看出该命令执行成功。
	redis 127.0.0.1:6379> expire mykey 20
	(integer) 1
	#再用ttl确认一下，从结果中可以看出果然被更新了。
	redis 127.0.0.1:6379> ttl mykey
	(integer) 17
	#立刻更新该键的值，以使其超时无效。
	redis 127.0.0.1:6379> set mykey "world"
	OK
	#从ttl的结果可以看出，在上一条修改该键的命令执行后，该键的超时也无效了。
	redis 127.0.0.1:6379> ttl mykey
	(integer) -1


3. TYPE/RANDOMKEY/SORT:
	#由于mm键在数据库中不存在，因此该命令返回none。
	redis 127.0.0.1:6379> type mm
	none
	#mykey的值是字符串类型，因此返回string。
	redis 127.0.0.1:6379> type mykey
	string
	#准备一个值是set类型的键。
	redis 127.0.0.1:6379> sadd mysetkey 1 2
	(integer) 2
	#mysetkey的键是set，因此返回字符串set。
	redis 127.0.0.1:6379> type mysetkey
	set
	#返回数据库中的任意键。
	redis 127.0.0.1:6379> randomkey
	"oldkey"
	#清空当前打开的数据库。
	redis 127.0.0.1:6379> flushdb
	OK
	#由于没有数据了，因此返回nil。
	redis 127.0.0.1:6379> randomkey
	(nil)


4. 集群相关命令
	集群
	CLUSTER INFO 打印集群的信息
	CLUSTER NODES 列出集群当前已知的所有节点（node），以及这些节点的相关信息。
	节点
	CLUSTER MEET <ip> <port> 将 ip 和 port 所指定的节点添加到集群当中，让它成为集群的一份子。
	CLUSTER FORGET <node_id> 从集群中移除 node_id 指定的节点。
	CLUSTER REPLICATE <node_id> 将当前节点设置为 node_id 指定的节点的从节点。
	CLUSTER SAVECONFIG 将节点的配置文件保存到硬盘里面。
	槽(slot)
	CLUSTER ADDSLOTS <slot> [slot ...] 将一个或多个槽（slot）指派（assign）给当前节点。
	CLUSTER DELSLOTS <slot> [slot ...] 移除一个或多个槽对当前节点的指派。
	CLUSTER FLUSHSLOTS 移除指派给当前节点的所有槽，让当前节点变成一个没有指派任何槽的节点。
	CLUSTER SETSLOT <slot> NODE <node_id> 将槽 slot 指派给 node_id 指定的节点，如果槽已经指派给另一个节点，那么先让另一个节点删除该槽>，然后再进行指派。
	CLUSTER SETSLOT <slot> MIGRATING <node_id> 将本节点的槽 slot 迁移到 node_id 指定的节点中。
	CLUSTER SETSLOT <slot> IMPORTING <node_id> 从 node_id 指定的节点中导入槽 slot 到本节点。
	CLUSTER SETSLOT <slot> STABLE 取消对槽 slot 的导入（import）或者迁移（migrate）。
	键
	CLUSTER KEYSLOT <key> 计算键 key 应该被放置在哪个槽上。
	CLUSTER COUNTKEYSINSLOT <slot> 返回槽 slot 目前包含的键值对数量。
	CLUSTER GETKEYSINSLOT <slot> <count> 返回 count 个 slot 槽中的键。

	
主从：
	从库配置：slaveof 主库IP 主库端口