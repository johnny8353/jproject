Redis数据类型
  Redis的五大数据类型
    String（字符串）
		string是redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。
		string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。
		string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M
    Hash（哈希，类似java里的Map）
   		Redis hash 是一个键值对集合。
		Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。
		类似Java里面的Map<String,Object>
    List（列表）
    	Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。
		它的底层实际是个链表（LinkedList 1.6 Entry 1.7 Node）
    Set（集合）
    	Redis的Set是string类型的无序集合。它是通过HashTable实现实现的，
    Zset(sorted set：有序集合)
    	Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。
		不同的是每个元素都会关联一个double类型的分数。
		redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。
    
    
  哪里去获得redis常见数据类型操作命令
    Http://redisdoc.com/
  Redis 键(key)
    常用
    案例
       keys *
       exists key的名字，判断某个key是否存在
       move key db   --->当前库就没有了，被移除了
       expire key 秒钟：为给定的key设置过期时间
       ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期
       type key 查看你的key是什么类型
  Redis字符串(String)
	    常用
	    单值单value
	    案例
	       set/get/del/append/strlen
	       Incr/decr/incrby/decrby,一定要是数字才能进行加减
	       getrange/setrange
	       	getrange:获取指定区间范围内的值，类似between......and的关系
			从零到负一表示全部
			setrange设置指定区间范围内的值，格式是setrange key值 具体值
	       setex(set with expire)键秒值/setnx(set if not exist)
       		setex:设置带过期时间的key，动态设置。
			setex 键 秒值 真实值
			setnx:只有在 key 不存在时设置 key 的值。
	       mset/mget/msetnx
	        mset:同时设置一个或多个 key-value 对。
			mset:同时设置一个或多个 key-value 对。
			msetnx:同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。
	       getset(先get再set)
	       	getset:将给定 key 的值设为 value ，并返回 key 的旧值(old value)。
			简单一句话，先get然后立即set
  Redis列表(List)
	    常用
	    单值多value
	    案例
	       lpush/rpush/lrange
	       lpop/rpop
	       lindex，按照索引下标获得元素(从上到下)
	       llen
	       lrem key 删N个value
	       ltrim key 开始index 结束index，截取指定范围的值后再赋值给key
	       rpoplpush 源列表 目的列表
	       lset key index value
	       linsert key  before/after 值1 值2
	      性能总结
	     	 它是一个字符串链表，left、right都可以插入添加；
			如果键不存在，创建新的链表；
			如果键已存在，新增内容；
			如果值全移除，对应的键也就消失了。
			链表的操作无论是头和尾效率都极高，但假如是对中间元素进行操作，效率就很惨淡了。
  Redis集合(Set)
	    常用
	    单值多value
	    案例
	       sadd/smembers/sismember
	       scard，获取集合里面的元素个数
	       srem key value 删除集合中元素
	       srandmember key 某个整数(随机出几个数)
	       spop key 随机出栈
	       smove key1 key2 在key1里某个值      作用是将key1里的某个值赋给key2
	       数学集合类
	        差集：sdiff
	        交集：sinter
	        并集：sunion
  Redis哈希(Hash)
	    常用
	    KV模式不变，但V是一个键值对
	    案例
	       *hset/hget/hmset/hmget/hgetall/hdel
	       hlen
	       hexists key 在key里面的某个值的key
	       hkeys/hvals
	       hincrby/hincrbyfloat
	       hsetnx
  Redis有序集合Zset(sorted set)
	    多说一句
	      在set基础上，加一个score值。 之前set是k1 v1 v2 v3， 现在zset是k1 score1 v1 score2 v2
	    常用
	    案例
	       zadd/zrange
	        Withscores
	       zrangebyscore key 开始score 结束score
	         withscores
	         (   不包含
	         Limit 作用是返回限制
	           limit 开始下标步 多少步
	       zrem key 某score下对应的value值，作用是删除元素
	       zcard/zcount key score区间/zrank key values值，作用是获得下标值/zscore key 对应值,获得分数
	       zrevrank key values值，作用是逆序获得下标值
	       zrevrange
	       zrevrangebyscore  key 结束score 开始score