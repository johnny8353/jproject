问题
使用Nginx如何配置Tomcat访问日志记录真实IP
	使用Nginx作为反向代理时，Tomcat的日志记录的客户端IP就不在是真实的客户端IP，而是Nginx代理的IP。要解决这个问题可以在Nginx配置一个新的Header，用来存储$remote_add，然后再Tomcat获取记录这个值。
	1.Nginx新增配置：
	proxy_set_header  X-Real-IP  $remote_addr;  

	其实就是新增了一个名为X-Real-IP值为真实客户端IP的头信息。

	2.修改tomcat日志配置：
	<Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"  prefix="tomcat_access_log." suffix=".txt"  
	pattern="%a %r %t %{X-Real_IP}i" resolveHosts="false"/>  
	没有Nginx这一层的时候直接用%a就可以获得客户端IP，现在我们得用%{X-Real-IP}i 来获得真实的IP了。
	http://www.linuxidc.com/Linux/2012-03/56119.htm
	
bind() to 0.0.0.0:80 failed (98: Address already in use)
	httpd把80端口占用了

nginx负载均衡基于ip_hash的session粘帖

	nginx可以根据客户端IP进行负载均衡，在upstream里设置ip_hash，就可以针对同一个C类地址段中的客户端选择同一个后端服务器，除非那个后端服务器宕了才会换一个。
	
	nginx的upstream目前支持的5种方式的分配
	
	
	1、轮询（默认） 
	每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。 
	upstream backserver { 
	server 192.168.0.14; 
	server 192.168.0.15; 
	} 
	
	2、指定权重 
	指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 
	upstream backserver { 
	server 192.168.0.14 weight=10; 
	server 192.168.0.15 weight=10; 
	} 
	
	3、IP绑定 ip_hash 
	每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 
	upstream backserver { 
	ip_hash; 
	server 192.168.0.14:88; 
	server 192.168.0.15:80; 
	} 
	
	4、fair（第三方） 
	按后端服务器的响应时间来分配请求，响应时间短的优先分配。 
	upstream backserver { 
	server server1; 
	server server2; 
	fair; 
	} 
	
	5、url_hash（第三方） 
	按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 
	upstream backserver { 
	server squid1:3128; 
	server squid2:3128; 
	hash $request_uri; 
	hash_method crc32; 
	} 
	
	在需要使用负载均衡的server中增加 
	
	proxy_pass http://backserver/; 
	upstream backserver{ 
	
	ip_hash; 
	server 127.0.0.1:9090 down; (down 表示单前的server暂时不参与负载) 
	server 127.0.0.1:8080 weight=2; (weight 默认为1.weight越大，负载的权重就越大) 
	server 127.0.0.1:6060; 
	server 127.0.0.1:7070 backup; (其它所有的非backup机器down或者忙的时候，请求backup机器) 
	} 
	
	max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误 
	  
	fail_timeout:max_fails次失败后，暂停的时间
Location
	在nginx中配置proxy_pass时，当在后面的url加上了/，相当于是绝对根路径，则nginx不会把location中匹配的路径部分代理走;如果没有/，则会把匹配的路径部分也给代理走。
	
	
	下面四种情况分别用http://192.168.1.4/proxy/test.html 进行访问。
	第一种：
	location  /proxy/ {
	proxy_pass http://127.0.0.1:81/;
	}
	
	会被代理到http://127.0.0.1:81/test.html 这个url
	
	第二咱(相对于第一种，最后少一个 /)
	location  /proxy/ {
	proxy_pass http://127.0.0.1:81;
	}
	
	会被代理到http://127.0.0.1:81/proxy/test.html 这个url
	
	 
	第三种：
	location  /proxy/ {
	proxy_pass http://127.0.0.1:81/ftlynx/;
	}
	
	会被代理到http://127.0.0.1:81/ftlynx/test.html 这个url。
	
	
	第四种情况(相对于第三种，最后少一个 / )：
	location  /proxy/ {
	proxy_pass http://127.0.0.1:81/ftlynx;
	}
	
	会被代理到http://127.0.0.1:81/ftlynxtest.html 这个url
	
	上面的结果都是本人结合日志文件测试过的。从结果可以看出，应该说分为两种情况才正确。即http://127.0.0.1:81 (上面的第二种) 这种和 http://127.0.0.1:81/…. （上面的第1，3，4种） 这种。


其他配置
	配置跳转siebel系统-Nginx监听多端口
		由于siebel的web使用7780端口，所以需要在nginx启动7780端口监听，否则会出现一些异常，比如会直接在nginx服务器7780端口请求数据，如果不是对应使用该端口会出现问题。
		
		
		http配置：
		http {
		    include       mime.types;
		    default_type  application/octet-stream;
		
		    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
		    #                  '$status $body_bytes_sent "$http_referer" '
		    #                  '"$http_user_agent" "$http_x_forwarded_for"';
		
		    #access_log  logs/access.log  main;
		
		    sendfile        on;
		    #tcp_nopush     on;
		
		    #keepalive_timeout  0;
		    keepalive_timeout  65;
		
		    #gzip  on;
			upstream siebelRec{
				ip_hash;
				server 10.3.64.180:7780 weight=3 max_fails=10 fail_timeout=60s;
				server 10.5.7.161:7780 weight=3 max_fails=10 fail_timeout=60s;
				server 10.5.6.196:7780 weight=3 max_fails=10 fail_timeout=60s;
			}
		
		    server {
		        listen       80;
		        server_name  localhost;
		
		        #charset koi8-r;
		
		        #access_log  logs/host.access.log  main;
		
		        location / {
		            root   html;
		            index  index.html index.htm;
		        }
				
				location /htim {        
					proxy_connect_timeout 75;
					proxy_read_timeout 259200;
					proxy_send_timeout 259200;
					proxy_next_upstream http_502 http_504 error timeout;
					proxy_pass   http://siebelRec;
					proxy_set_header Host $host;
					proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;     
					proxy_set_header Upgrade $http_upgrade;
					proxy_set_header Connection "upgrade";
					client_max_body_size 100M;
				}
		
		        #error_page  404              /404.html;
		
		        # redirect server error pages to the static page /50x.html
		        #
		        error_page   500 502 503 504  /50x.html;
		        location = /50x.html {
		            root   html;
		        }
		
		        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
		        #
		        #location ~ \.php$ {
		        #    proxy_pass   http://127.0.0.1;
		        #}
		
		        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
		        #
		        #location ~ \.php$ {
		        #    root           html;
		        #    fastcgi_pass   127.0.0.1:9000;
		        #    fastcgi_index  index.php;
		        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
		        #    include        fastcgi_params;
		        #}
		
		        # deny access to .htaccess files, if Apache's document root
		        # concurs with nginx's one
		        #
		        #location ~ /\.ht {
		        #    deny  all;
		        #}
		    }
			
			server {
		        listen       7780;
		        server_name  localhost;
		
		        #charset koi8-r;
		
		        #access_log  logs/host.access.log  main;
		
		        location / {
		            root   html;
		            index  index.html index.htm;
		        }
				
				location /htim {        
					proxy_connect_timeout 75;
					proxy_read_timeout 259200;
					proxy_send_timeout 259200;
					proxy_next_upstream http_502 http_504 error timeout;
					proxy_pass   http://siebelRec;
					proxy_set_header Host $host;
					proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;     
					proxy_set_header Upgrade $http_upgrade;
					proxy_set_header Connection "upgrade";
					client_max_body_size 100M;
				}
		
		        error_page  404              /404.html;
		
		        # redirect server error pages to the static page /50x.html
		        #
		        error_page   500 502 503 504  /50x.html;
		        location = /50x.html {
		            root   html;
		        }
		
		    }
		
		
		    # another virtual host using mix of IP-, name-, and port-based configuration
		    #
		    #server {
		    #    listen       8000;
		    #    listen       somename:8080;
		    #    server_name  somename  alias  another.alias;
		
		    #    location / {
		    #        root   html;
		    #        index  index.html index.htm;
		    #    }
		    #}
		
		
		    # HTTPS server
		    #
		    #server {
		    #    listen       443;
		    #    server_name  localhost;
		
		    #    ssl                  on;
		    #    ssl_certificate      cert.pem;
		    #    ssl_certificate_key  cert.key;
		
		    #    ssl_session_timeout  5m;
		
		    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
		    #    ssl_ciphers  HIGH:!aNULL:!MD5;
		    #    ssl_prefer_server_ciphers   on;
		
		    #    location / {
		    #        root   html;
		    #        index  index.html index.htm;
		    #    }
		    #}
		
		}
灰度配置：
Nginx日志：
	一、日志分类
	        Nginx日志主要分为两种：访问日志和错误日志。日志开关在Nginx配置文件（/etc/nginx/nginx.conf）中设置，两种日志都可以选择性关闭，默认都是打开的。
	1、访问日志
	        访问日志主要记录客户端访问Nginx的每一个请求，格式可以自定义。通过访问日志，你可以得到用户地域来源、跳转来源、使用终端、某个URL访问量等相关信息。Nginx中访问日志相关指令主要有两条：
	        （1）log_format
	        log_format用来设置日志格式，也就是日志文件中每条日志的格式，具体如下：
	        log_format name(格式名称) type(格式样式)
	        举例说明如下：
	        log_format  main  '$server_name $remote_addr - $remote_user [$time_local] "$request" '
	                        '$status $uptream_status $body_bytes_sent "$http_referer" '
	                        '"$http_user_agent" "$http_x_forwarded_for" '
	                        '$ssl_protocol $ssl_cipher $upstream_addr $request_time $upstream_response_time';
	        上面红色部分为Nginx默认指定的格式样式，每个样式的含义如下：
	        $server_name：虚拟主机名称。
	        $remote_addr：远程客户端的IP地址。
	        -：空白，用一个“-”占位符替代，历史原因导致还存在。
	        $remote_user：远程客户端用户名称，用于记录浏览者进行身份验证时提供的名字，如登录百度的用户名scq2099yt，如果没有登录就是空白。
	        [$time_local]：访问的时间与时区，比如18/Jul/2012:17:00:01 +0800，时间信息最后的"+0800"表示服务器所处时区位于UTC之后的8小时。
	        $request：请求的URI和HTTP协议，这是整个PV日志记录中最有用的信息，记录服务器收到一个什么样的请求
	        $status：记录请求返回的http状态码，比如成功是200。
	        $uptream_status：upstream状态，比如成功是200.
	        $body_bytes_sent：发送给客户端的文件主体内容的大小，比如899，可以将日志每条记录中的这个值累加起来以粗略估计服务器吞吐量。
	        $http_referer：记录从哪个页面链接访问过来的。 
	        $http_user_agent：客户端浏览器信息
	        $http_x_forwarded_for：客户端的真实ip，通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。
	        $ssl_protocol：SSL协议版本，比如TLSv1。
	        $ssl_cipher：交换数据中的算法，比如RC4-SHA。 
	        $upstream_addr：upstream的地址，即真正提供服务的主机地址。 
	        $request_time：整个请求的总时间。 
	        $upstream_response_time：请求过程中，upstream的响应时间。
	        访问日志中一个典型的记录如下：
	        192.168.1.102 - scq2099yt [18/Mar/2013:23:30:42 +0800] "GET /stats/awstats.pl?config=scq2099yt HTTP/1.1" 200 899 "http://192.168.1.1/pv/" "Mozilla/4.0 (compatible; MSIE 6.0; Windows XXX; Maxthon)"
	        需要注意的是：log_format配置必须放在http内，否则会出现如下警告信息：
	        nginx: [warn] the "log_format" directive may be used only on "http" level in /etc/nginx/nginx.conf:97
	
				变量名称	变量描述	举例说明
				$remote_addr	客户端地址	113.140.15.90
				$remote_user	客户端用户名称	-
				$time_local	访问时间和时区	18/Jul/2012:17:00:01 +0800
				$request	请求的URI和HTTP协议	“GET /pa/img/home/logo-alipay-t.png HTTP/1.1″
				$http_host	请求地址，即浏览器中你输入的地址（IP或域名）	img.alipay.com
						10.253.70.103
				$status	HTTP请求状态	200
				$upstream_status	upstream状态	200
				$body_bytes_sent	发送给客户端文件内容大小	547
				$http_referer	跳转来源	 “https://cashier.alipay.com…/”
				$http_user_agent	用户终端代理	“Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; 
				Trident/4.0; SV1; GTB7.0; .NET4.0C;
				$ssl_protocol	SSL协议版本	TLSv1
				$ssl_cipher	交换数据中的算法	RC4-SHA
				$upstream_addr	后台upstream的地址，即真正提供服务的主机地址	10.228.35.247:80
				$request_time	整个请求的总时间	0.205
				$upstream_response_time	请求过程中，upstream响应时间	0.002
	
	
	        （2）access_log
	        access_log指令用来指定日志文件的存放路径（包含日志文件名）、格式和缓存大小，具体如下：
	        access_log path(存放路径) [format(自定义日志格式名称) [buffer=size | off]]
	        举例说明如下：
	        access_log  logs/access.log  main;
	        如果想关闭日志，可以如下：
	        access_log off;
	        能够使用access_log指令的字段包括：http、server、location。
	        需要注意的是：Nginx进程设置的用户和组必须对日志路径有创建文件的权限，否则，会报错。
	        小技巧：如果需要在access_log中记录post请求的参数，可以参考这里。
	        Nginx支持为每个location指定强大的日志记录。同样的连接可以在同一时间输出到不止一个的日志中，更多信息请查看这里，这里，还有这里。
	2、错误日志
	        错误日志主要记录客户端访问Nginx出错时的日志，格式不支持自定义。通过错误日志，你可以得到系统某个服务或server的性能瓶颈等。因此，将日志好好利用，你可以得到很多有价值的信息。错误日志由指令error_log来指定，具体格式如下：
	        error_log path(存放路径) level(日志等级)
	        path含义同access_log，level表示日志等级，具体如下：
	        [ debug | info | notice | warn | error | crit ]
	        从左至右，日志详细程度逐级递减，即debug最详细，crit最少。
	        举例说明如下：
	        error_log  logs/error.log  info;
	        需要注意的是：error_log off并不能关闭错误日志，而是会将错误日志记录到一个文件名为off的文件中。
	        正确的关闭错误日志记录功能的方法如下：
	        error_log /dev/null;
	        上面表示将存储日志的路径设置为“垃圾桶”。
	        
	二、日志管理
	        新版本Nginx支持自动切割并压缩日志，日志文件名如下：
	        access.log
	        access.log.1
	        access.log.2.gz
	        access.log.3.gz
	        error.log
	        error.log.1
	        error.log.2.gz
	        error.log.3.gz
	        默认是每天都会产生一个.gz文件。
	        如果默认切割不满足你的需求，你也可以用其它的方式，比如：这里，还有这里。
	
		为每一个工程定义特定的日志
		
		location ~* ^/mobileWeb/.*$ {
		client_max_body_size 5m;
		include deny.conf;
		proxy_pass http://mobilewebbackend;
		include proxy.conf;
		error_log  logs/mobileweb_error.log error;
		access_log  logs/mobileweb_access.log  main;
		include gzip.conf;
		}
	这样，就会在日志路径/usr/local/nginx/logs/下面生成mobileWeb工程的专门日志mobileweb_error.log 以及mobileweb_access.log 日志，如果想查询mobileWeb工程的访问记录，就可以单独去查看这2个日志。
