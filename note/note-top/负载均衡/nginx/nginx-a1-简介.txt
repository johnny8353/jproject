	反向代理服务器：在服务器端接受客户端的请求，然后把请求分发给具体的服务器进行处理，然后再将服务器的响应结果反馈给客户端。Nginx就是其中的一种反向代理服务器软件。

	用户A始终认为它访问的是原始服务器B而不是代理服务器Z，但实用际上反向代理服务器接受用户A的应答，
	
	从原始资源服务器B中取得用户A的需求资源，然后发送给用户A。由于防火墙的作用，只允许代理服务器Z访问原始资源服务器B。尽管在这个虚拟的环境下，防火墙和反向代理的共同
	作用保护了原始资源服务器B，但用户A并不知情。 
	
Nginx的特点
	-跨平台：Nginx 可以在大多数 Unix like OS编译运行，而且也有Windows的移植版本。
	-配置异常简单，非常容易上手。配置风格跟程序开发一样，神一般的配置
	-非阻塞、高并发连接：数据复制时，磁盘I/O的第一阶段是非阻塞的。官方测试能够支撑5万并发连接，在实际生产环境中跑到2～3万并发连接数.(这得益于Nginx使用了最新的epoll模型)
	-事件驱动：通信机制采用epoll模型，支持更大的并发连接。
	-master/worker结构：一个master进程，生成一个或多个worker进程
	-内存消耗小：处理大并发的请求内存消耗非常小。在3万并发连接下，开启的10个Nginx 进程才消耗150M内存（15M*10=150M） 成本低廉：Nginx为开源软件，可以免费使用。
		而购买F5 BIG-IP、NetScaler等硬件负载均衡交换机则需要十多万至几十万人民币
	-内置的健康检查功能：如果 Nginx Proxy 后端的某台 Web 服务器宕机了，不会影响前端访问。
	-节省带宽：支持 GZIP 压缩，可以添加浏览器本地缓存的 Header 头。
	-稳定性高：用于反向代理，宕机的概率微乎其微

WHY? 为什么用Nginx而不用LVS?
	7点理由足以说明一切：
	1 、高并发连接： 官方测试能够支撑 5 万并发连接，在实际生产环境中跑到 2 ～ 3 万并发连接数。 
	2 、内存消耗少： 在 3 万并发连接下，开启的 10 个 Nginx 进程才消耗 150M 内存（ 15M*10=150M ）。 
	3 、配置文件非常简单： 风格跟程序一样通俗易懂。 
	4 、成本低廉： Nginx 为开源软件，可以免费使用。而购买 F5 BIG-IP 、 NetScaler 等硬件负载均衡交换机则需要十多万至几十万人民币。 
	• 使用 Nginx 做七层负载均衡的理由 
	5 、支持 Rewrite 重写规则： 能够根据域名、 URL 的不同，将 HTTP 请求分到不同的后端服务器群组。 
	6 、内置的健康检查功能： 如果 Nginx Proxy 后端的某台 Web 服务器宕机了，不会影响前端访问。 
	7 、节省带宽： 支持 GZIP 压缩，可以添加浏览器本地缓存的 Header 头。

Nginx+keepalved实现负载均衡，解决单点与高流量并发问题
	-Keepalived是Linux下面实现VRRP 备份路由的高可靠性运行件。基于Keepalived设计的服务模式能够真正做到主服务器和备份服务器故障时IP瞬间无缝交接。
	-Nginx是基于Linux 2.6内核中epoll模型http服务器，与Apache进程派生模式不同的是Nginx进程基于于Master+Slave多进程模型，自身具有非常 稳定的子进程管理功能。
	在Master进程分配模式下，Master进程永远不进行业务处理，只是进行任务分发，从而达到Master进程的存活高可靠 性，Slave进程所有的业务信号都由主进程发出，
	Slave进程所有的超时任务都会被Master中止，属于非阻塞式任务模型。
	-服务器IP存活检测是由Keepalived自己本身完成的，将2台服务器配置成Keepalived互为主辅关系，任意一方机器故障对方都能够将IP接 管过去。
	-Keepalived的服务IP通过其配置文件进行管理，依靠其自身的进程去确定服务器的存活状态，如果在需要对服务器进程在线维护的情况下，只需要停掉 被维护机器的Keepalived服务进程，
	另外一台服务器就能够接管该台服务器的所有应用。

	
