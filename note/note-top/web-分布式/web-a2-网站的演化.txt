前言
	一个成熟的大型网站（如淘宝、京东等）的系统架构并不是开始设计就具备完整的高性能、高可用、安全等特性，它总是随着用户量的增加，业务功能的扩展逐渐演变完善的，在这个过程中，开发模式、技术架构、设计思想也发生了很大的变化，
	就连技术人员也从几个人发展到一个部门甚至一条产品线。所以成熟的系统架构是随业务扩展而完善出来的，并不是一蹴而就；不同业务特征的系统，会有各自的侧重点，例如淘宝，要解决海量的商品信息的搜索、下单、支付，
	例如腾讯，要解决数亿的用户实时消息传输，百度它要处理海量的搜索请求，他们都有各自的业务特性，系统架构也有所不同。尽管如此我们也可以从这些不同的网站背景下，找出其中共用的技术，
	这些技术和手段可以广泛运行在大型网站系统的架构中，下面就通过介绍大型网站系统的演化过程，来认识这些技术和手段。
	
一、最开始的网站架构	-	p1
	最初的架构，应用程序、数据库、文件都部署在一台服务器上，
	大型网站都是由小型网站演变而来的，网站架构也一样.小型网站最开始没有太多人访问，只需要一台服务器就绰绰有余
	应用程序、数据库、文件等所有资源都在一台服务器上，通常使用 Linux PHP MySQL Apache 就可以完成整个项目部署，然后再买个域名，租一个廉价的服务器就可以开始我们的网站之旅了
    
二、应用、数据、文件分离	-	p2
	随着业务的扩展，一台服务器已经不能满足性能需求，故将应用程序、数据库、文件各自部署在独立的服务器上，并且根据服务器的用途配置不同的硬件，达到最佳的性能效果。    
	对于这三台服务器要求各不相同：
		应用服务器 要处理大量的业务逻辑，所以需要更好更快更强大的 CPU
		数据库服务器 需要快速的进行磁盘检索和数据缓存，因此需要更快的硬盘和更大的内存
		文件服务器 需要存储用户上传的文件资源，因此需要更大的硬盘存储空间
	应用与数据分离后，各个的职责变得更加专一，网站的性能得到进一步的提升，但随着用户的继续增加，我们需要对网站架构进一步优化
    
三、利用缓存改善网站性能
	在硬件优化性能的同时，同时也通过软件进行性能优化，在大部分的网站系统中，都会利用缓存技术改善系统的性能，使用缓存主要源于热点数据的存在，大部分网站访问都遵循28原则（即80%的访问请求，最终落在20%的数据上），
	所以我们可以对热点数据进行缓存，减少这些数据的访问路径，提高用户体验。    
	
	
	网站的缓存可以分为两种：缓存在应用服务器上的本地缓存和缓存在专门的分布式缓存服务器上的远程缓存
		- 本地缓存 的访问速度会快一些，但是受应用服务器内存限制，缓存数据量很有限，而且会出现内存争用的情况
		- 远程分布式缓存 可以使用集群的方式，部署大内存的服务器作为专门的缓存服务器，可以在理论上做到不受内存容量限制的缓存服务
		
	使用缓存后，数据访问压力得到了有效的缓解，但单一的应用服务器能够处理的请求连接数有限，在访问的高峰期，应用服务器又会成为网站性能的瓶颈

	缓存实现常见的方式是本地缓存、分布式缓存。当然还有CDN、反向代理等，这个后面再讲。本地缓存，顾名思义是将数据缓存在应用服务器本地，可以存在内存中，也可以存在文件，OSCache就是常用的本地缓存组件。
	本地缓存的特点是速度快，但因为本地空间有限所以缓存数据量也有限。分布式缓存的特点是，可以缓存海量的数据，并且扩展非常容易，在门户类网站中常常被使用，速度按理没有本地缓存快，常用的分布式缓存是Memcached、Redis。
	
四、使用集群改善应用服务器性能
	应用服务器作为网站的入口，会承担大量的请求，我们往往通过应用服务器集群来分担请求数。应用服务器前面部署负载均衡服务器调度用户请求，根据分发策略将请求分发到多个应用服务器节点。
	
	使用集群是网站解决高并发，海量数据问题的常用手段，当你纵向提升到一定程度后，那就该开始横向提升了

	当一台服务器的处理能力不足时，与其换一台更强大的服务器，不如增加一台服务器去分担原有的服务器压力。对于大型网站而言，无论多么强大的服务器，都满足不了持续增长的业务需求，更高效的方式就是增加服务器来分担压力
	
	对于网站架构而言，如果增添一台新的服务器可以改善负载压力，那么就可以使用同样的方式来应对源源不断的业务需求，从而实现系统的可伸缩性
	通过负载均衡调度服务器，可以将用户请求分发到应用服务器集群里的任何一台服务器上，如果有更多的用户，可以增加更多的应用服务器，使应用服务器的负载压力不再成为网站的性能问题

	 常用的负载均衡技术硬件的有F5，价格比较贵，软件的有LVS、Nginx、HAProxy。LVS是四层负载均衡，根据目标地址和端口选择内部服务器，Nginx是七层负载均衡和HAProxy支持四层、七层负载均衡，可以根据报文内容选择内部服务器，
	 因此LVS分发路径优于Nginx和HAProxy，性能要高些，而Nginx和HAProxy则更具配置性，如可以用来做动静分离（根据请求报文特征，选择静态资源服务器还是应用服务器）。
	 
五、数据库读写分离和分库分表

	在使用了缓存后，大多数的操作不经过数据库访问就能完成，但仍有一部分读操作（缓存访问未命中，缓存过期）和所有的写操作需要访问数据库，在网站的用户量达到一定时，数据库的负载问题就来了
	目前大多数的数据库都支持主从热备份，通过配置两台服务器的主从关系，可以将一台数据库服务器的数据更新同步到另一台，网站利用这一功能，实现数据库读写分离，从而进一步改善数据库负载压力

	随着用户量的增加，数据库成为最大的瓶颈，改善数据库性能常用的手段是进行读写分离以及分表，读写分离顾名思义就是将数据库分为读库和写库，通过主备功能实现数据同步。
	分库分表则分为水平切分和垂直切分，水平切换则是对一个数据库特大的表进行拆分，例如用户表。垂直切分则是根据业务不同来切换，如用户业务、商品业务相关的表放在不同的数据库中。
	
	应用服务器在写操作的时候，访问主数据库，主数据库通过主从复制机制把数据同步更新到从数据库，这样当应用服务器进行读操作的时候，就能访问从数据库获取数据
	
六、使用CDN和反向代理提高网站性能
	CDN 和 反向代理 的基本原理都是缓存
	
	CDN 部署在网络供应商的机房，用户在进行请求时，会从距离最近的网络供应商机房获取数据
	反向代理 则部署在中心机房，当用户请求到达中心机房后，会首先访问反向代理服务器，如果反向代理服务器中缓存这用户请求的资源，就直接返回给用户
	使用 CDN 和 反向代理 都是为了尽快返回给用户数据，一方面加快用户访问速度，另一方面也减轻了后端服务器的压力
	
	
	假如我们的服务器都部署在成都的机房，对于四川的用户来说访问是较快的，而对于北京的用户访问是较慢的，这是由于四川和北京分别属于电信和联通的不同发达地区，
	北京用户访问需要通过互联路由器经过较长的路径才能访问到成都的服务器，返回路径也一样，所以数据传输时间比较长。对于这种情况，常常使用CDN解决，CDN将数据内容缓存到运营商的机房，
	用户访问时先从最近的运营商获取数据，这样大大减少了网络访问的路径。比较专业的CDN运营商有蓝汛、网宿。
	而反向代理，则是部署在网站的机房，当用户请求达到时首先访问反向代理服务器，反向代理服务器将缓存的数据返回给用户，如果没有没有缓存数据才会继续走应用服务器获取，也减少了获取数据的成本。反向代理有Squid，Nginx。
	
	
七、使用分布式文件系统和分布式数据库系统
	用户一天天增加，业务量越来越大，产生的文件越来越多，单台的文件服务器已经不能满足需求。需要分布式的文件系统支撑。常用的分布式文件系统有NFS。
	
	随着网站业务的继续发展，这时候就可以像分布式应用服务器一样，对数据库系统和文件系统进行分布式管理
	分布式数据库 是网站数据库拆分的最后手段，一般我们可以采取业务分库，根据不同业务的数据库部署在不同的数据库服务器上
	
八、使用NoSql和搜索引擎
	对于海量数据的查询，我们使用nosql数据库加上搜索引擎可以达到更好的性能。并不是所有的数据都要放在关系型数据中。常用的NOSQL有mongodb和redis，搜索引擎有lucene。	
	
	这两个方式都是依赖于互联网的技术手段，应用服务器通过一个统一的数据访问模块来访问各种数据，从而减轻应用程序有多个数据源的麻烦
	
九、将应用服务器进行业务拆分
	随着业务进一步扩展，应用程序变得非常臃肿，这时我们需要将应用程序进行业务拆分，如百度分为新闻、网页、图片等业务。每个业务应用负责相对独立的业务运作。业务之间通过消息进行通信或者同享数据库来实现。	
	对于大型网站，我们可以分而治之，把整个网站的业务分为不同的模块，比如大型的交易购物完整可以分为首页、店铺、订单、买家等，分别交给不同的业务团队来负责
	同时我们将一个网站根据模块划分拆分成多个应用，每个应用进行单独的部署和维护，应用之间通过超链接建立关系（指向不同的应用地址），最后通过相同的数据存储系统来构成一个互相关联的完整系统	
	
十、搭建分布式服务
	这时我们发现各个业务应用都会使用到一些基本的业务服务，例如用户服务、订单服务、支付服务、安全服务，这些服务是支撑各业务应用的基本要素。我们将这些服务抽取出来利用分部式服务框架搭建分布式服务。淘宝的Dubbo是一个不错的选择。	
	
	随着业务拆分，整个系统越来越大，应用的整体复杂度呈指数级增加，部署维护越来越困难，并且所有的应用服务器都要与数据库服务连接， 在数万台服务器规模的情况下，这些连接的数目是服务器规模的平方，导致资源不足
	这时候就要对相同的业务进行提取，独立部署，把这些可重用的业务和连接数据库等，提取出来作为公共业务服务，而应用系统只需要通过分布式服务访问公共业务服务完成业务操作

小结
	 大型网站的架构是根据业务需求不断完善的，根据不同的业务特征会做特定的设计和考虑，本文只是讲述一个常规大型网站会涉及的一些技术和手段。
	