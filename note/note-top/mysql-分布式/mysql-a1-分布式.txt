
mysql:

	mysql内建的复制功能是构建基于Mysql的大规模、高性能应用的基础，这类应用使用所谓的“水平扩展”的架构。我们可以通过为服务器配置一个
	或多个备库的方式来进行数据同步。复制功能不仅有利于构建高性能的应用，同时也是高可用性、可扩展性、容灾恢复、备份以及数据仓库等工作的基础
	事实上，可扩展性和高可用性通常是相关的话题。

分布式:

1 主从复制，是用来建立一个和主数据库完全一样的数据库环境，称为从数据库；主数据库一般是实时的业务数据库，从数据库的作用和使用场合一般有几个：
	一是作为后备数据库，主数据库服务器故障后，可切换到从数据库继续工作；
	二是可在从数据库作备份、数据统计等工作，这样不影响主数据库的性能；
	
	
	
2 读写分离，是指读与写分别使用不同的数据库，极大限度提高了应用中Read数据的速度和并发量。
	一般读写的数据库环境配置为，一个写入的数据库，一个或多个读的数据库，各个数据库分别位于不同的服务器上，充分利用服务器性能和数据库性能；当然，其中会涉及到如何保证读写数据库的数据一致，这个就可以利用主从复制技术来完成。
	一般应用场合为：业务吞吐量很大，读数据库（可简单理解为select语句的 比例和影响）的负载较大；
	官方的mysql-proxy就是一个实现了读写分离、负载均衡等多个功能的软件。
	
	
主从复制：	- HA 
	
	
读写分离：	- HP
	
	


	查询如何进行：
	
	
垂直分割(分库)：
	
	问题：join，事务
	
水平切片（分表）： 水平扩展、横向扩展

	问题：join，分页，事务
	
	经常一起使用的数据集中存储，避免跨分片读取
	

库表散列：
	
Mysql分库分表方案

	1.为什么要分表：
	
	当一张表的数据达到几千万时，你查询一次所花的时间会变多，如果有联合查询的话，我想有可能会死在那儿了。分表的目的就在于此，减小数据库的负担，缩短查询时间。
	
	mysql中有一种机制是表锁定和行锁定，是为了保证数据的完整性。表锁定表示你们都不能对这张表进行操作，必须等我对表操作完才行。行锁定也一样，别的sql必须等我对这条数据操作完了，才能对这条数据进行操作。
	
	2. mysql proxy：amoeba
	
	做mysql集群,利用amoeba。
	
	从上层的java程序来讲，不需要知道主服务器和从服务器的来源，即主从数据库服务器对于上层来讲是透明的。可以通过amoeba来配置。
	
	 3.大数据量并且访问频繁的表，将其分为若干个表
	
	比如对于某网站平台的数据库表-公司表，数据量很大，这种能预估出来的大数据量表，我们就事先分出个N个表，这个N是多少，根据实际情况而定。
	
	     某网站现在的数据量至多是5000万条，可以设计每张表容纳的数据量是500万条，也就是拆分成10张表，
	
	那么如何判断某张表的数据是否容量已满呢？可以在程序段对于要新增数据的表，在插入前先做统计表记录数量的操作，当<500万条数据，就直接插入，当已经到达阀值，可以在程序段新创建数据库表（或者已经事先创建好），再执行插入操作。
	
	 4. 利用merge存储引擎来实现分表
	
	如果要把已有的大数据量表分开比较痛苦，最痛苦的事就是改代码，因为程序里面的sql语句已经写好了。用merge存储引擎来实现分表, 这种方法比较适合.
