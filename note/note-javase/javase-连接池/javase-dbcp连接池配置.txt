DBCP(DataBase connection pool),数据库连接池。是 apache 上的一个 java 连接池项目，也是 tomcat 使用的连接池组件。
单独使用dbcp需要3个包：commons-dbcp.jar,commons-pool.jar,commons-collections.jar由于建立数据库连接是一个非常耗时耗资源的行为，
所以通过连接池预先同数据库建立一些连接，放在内存中，应用程序需要建立数据库连接时直接到连接池中申请一个就行，用完后再放回去。

spring中的配置：
	<!-- 配置dbcp数据源 -->
	<bean id="remoteDS" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<!-- 使用的JDBC驱动的完整有效的java 类名 -->
		<property name="driverClassName" value="${remote.jdbc.driver}" />
		<!-- 传递给JDBC驱动的用于建立连接的URL -->
		<property name="url" value="${remote.jdbc.url}" />
		<!-- 数据库用户名 -->
		<property name="username" value="${remote.jdbc.username}" />
		<!-- 用户密码 -->
		<property name="password" value="${remote.jdbc.password}" />
		<!-- 指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个. -->
		<property name="testOnBorrow" value="${dbcp.testOnBorrow}" />
		<!-- 指明是否在归还到池中前进行检验 -->
		<property name="testOnReturn" value="${dbcp.testOnReturn}" />
		<!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除. -->
		<property name="testWhileIdle" value="${dbcp.testWhileIdle}" />
		<!-- SQL查询,用来验证从连接池取出的连接,在将连接返回给调用者之前.如果指定,
				则查询必须是一个SQL SELECT并且必须返回至少一行记录 -->
		<property name="validationQuery" value="${dbcp.validationQuery}" />
		<!-- 连接池创建的连接的默认的auto-commit状态 -->
		<property name="defaultAutoCommit" value="${dbcp.defaultAutoCommit}" />
		<!-- 最大空闲连接 -->
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<!-- 最大连接数量 -->
		<property name="maxActive" value="${dbcp.maxActive}" />
		<!-- 连接在池中保持空闲而不被空闲连接回收器线程(如果有)回收的最小时间值，单位毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${dbcp.minEvictableIdleTimeMillis}" />
		<!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. 如果设置为非正数,则不运行空闲连接回收器线程 -->
		<property name="timeBetweenEvictionRunsMillis" value="${dbcp.timeBetweenEvictionRunsMillis}" />
	</bean>
	
参数含义
	参数  描述
	username  传递给JDBC驱动的用于建立连接的用户名
	password  传递给JDBC驱动的用于建立连接的密码
	url  传递给JDBC驱动的用于建立连接的URL
	driverClassName  使用的JDBC驱动的完整有效的java 类名
	connectionProperties  当建立新连接时被发送给JDBC驱动的连接参数，
	格式必须是 [propertyName=property;]*
	注意 ：参数user/password将被明确传递，所以不需要包括在这里。

	参数  默认值  描述
	defaultAutoCommit  true  连接池创建的连接的默认的auto-commit状态
	defaultReadOnly  driver default  连接池创建的连接的默认的read-only状态. 如果没有设置则setReadOnly方法将不会被调用. (某些驱动不支持只读模式,比如:Informix)
	defaultTransactionIsolation  driver default  连接池创建的连接的默认的TransactionIsolation状态. 
		下面列表当中的某一个: (参考javadoc)
		    * NONE
		    * READ_COMMITTED
		    * READ_UNCOMMITTED
		    * REPEATABLE_READ
		    * SERIALIZABLE
	defaultCatalog   连接池创建的连接的默认的catalog

	参数          默认值   描述
	initialSize    0  初始化连接:连接池启动时创建的初始化连接数量,1.2版本后支持
	maxActive 
	 8 最大活动连接:连接池在同一时间能够分配的最大活动连接的数量, 如果设置为非正数则表示不限制
	maxIdle 8 最大空闲连接:连接池中容许保持空闲状态的最大连接数量,超过的空闲连接将被释放,如果设置为负数表示不限制
	minIdle  0 最小空闲连接:连接池中容许保持空闲状态的最小连接数量,低于这个数量将创建新的连接,如果设置为0则不创建
	maxWait 无限 最大等待时间:当没有可用连接时,连接池等待连接被归还的最大时间(以毫秒计数),超过时间则抛出异常,如果设置为-1表示无限等待
	
	validationQuery   SQL查询,用来验证从连接池取出的连接,在将连接返回给调用者之前.如果指定,则查询必须是一个SQL SELECT并且必须返回至少一行记录
	testOnBorrow true  指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个.
	注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串
	testOnReturn  
	 false  指明是否在归还到池中前进行检验
	注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串
	testWhileIdle  false指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.
	注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串
	timeBetweenEvictionRunsMillis -1  在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. 如果设置为非正数,则不运行空闲连接回收器线程
	numTestsPerEvictionRun    3  在每次空闲连接回收器线程(如果有)运行时检查的连接数量
	minEvictableIdleTimeMillis 1000 * 60 * 30   连接在池中保持空闲而不被空闲连接回收器线程(如果有)回收的最小时间值，单位毫秒
	
	poolPreparedStatements 
	 false 开启池的prepared statement 池功能
	maxOpenPreparedStatements 不限制  statement池能够同时分配的打开的statements的最大数量, 如果设置为0表示不限制

	这里可以开启PreparedStatements池. 当开启时, 将为每个连接创建一个statement池,
	并且被下面方法创建的PreparedStatements将被缓存起来:
	    * public PreparedStatement prepareStatement(String sql)
	    * public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
	注意: 确认连接还有剩余资源可以留给其他statement

	accessToUnderlyingConnectionAllowed     false 控制PoolGuard是否容许获取底层连接
	如果容许则可以使用下面的方式来获取底层连接:
	    Connection conn = ds.getConnection();
	    Connection dconn = ((DelegatingConnection) conn).getInnermostDelegate();
	    ...
	    conn.close()
	默认false不开启, 这是一个有潜在危险的功能, 不适当的编码会造成伤害.
	(关闭底层连接或者在守护连接已经关闭的情况下继续使用它).请谨慎使用,并且仅当需要直接访问驱动的特定功能时使用.
	注意: 不要关闭底层连接, 只能关闭前面的那个.
	
	removeAbandoned false  标记是否删除泄露的连接,如果他们超过了removeAbandonedTimout的限制.如果设置为true, 连接被认为是被泄露并且可以被删除,如果空闲时间超过removeAbandonedTimeout. 
	设置为true可以为写法糟糕的没有关闭连接的程序修复数据库连接.
	removeAbandonedTimeout 300泄露的连接可以被删除的超时值, 单位秒
	logAbandoned
	 false标记当Statement或连接被泄露时是否打印程序的stack traces日志。被泄露的Statements和连接的日志添加在每个连接打开或者生成新的Statement,因为需要生成stack trace。
	
	如果开启"removeAbandoned",那么连接在被认为泄露时可能被池回收. 这个机制在(getNumIdle() < 2)
	 and (getNumActive() > getMaxActive() - 3)时被触发.
	举例当maxActive=20, 活动连接为18,空闲连接为1时可以触发"removeAbandoned".
	但是活动连接只有在没有被使用的时间超过"removeAbandonedTimeout"时才被删除,默认300秒.
	在resultset中游历不被计算为被使用.
	
	
	<!-- 数据源定义 -->
    <!--  -->
   <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="initialSize" value="${jdbc.initialSize}" />
        <property name="maxActive" value="${jdbc.maxActive}" />
        <property name="maxWait" value="${jdbc.maxActive}" />
        <property name="maxIdle" value="100" />
        <property name="removeAbandoned" value="true" />
        <property name="removeAbandonedTimeout" value="30000" />
        <property name="logAbandoned" value="false" />
        <property name="testOnBorrow" value="false"/>
        <property name="testWhileIdle" value="true"/>
        <property name= "timeBetweenEvictionRunsMillis" >
        	<value>30000</value>
        </property>
        <property name="validationQuery">  
   			 <value>SELECT 1 FROM SYS.DUAL</value>  
		</property>  
    </bean>
    
JAVA：
Properties properties = new Properties();
InputStream inStream = JDBCPoolsTest.class.getClassLoader()
		.getResourceAsStream("com\\johnny\\jdbc\\jdbc4\\dbcp.properties");
properties.load(inStream);
DataSource dataSource = BasicDataSourceFactory.createDataSource(properties);
System.out.println(dataSource.getConnection()); 