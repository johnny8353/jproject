java中的线程安全是什么：
	就是线程同步的意思，就是当一个程序对一个线程安全的方法或者语句进行访问的时候，其他的不能再对他进行操作了，
	必须等到这次访问结束以后才能对这个线程安全的方法进行访问

什么叫线程安全：
	如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，
	而且其他的变量的值也和预期的是一样的，就是线程安全的。 
	
	或者说:一个类或者程序所提供的接口对于线程来说是原子操作或者多个线程之间的切换不会导致该接口的执行结果存在二义性,也就是说我们不用考虑同步的问题。
	
出现线程安全问题的原因：
	线程安全问题都是由全局变量及静态变量引起的。
	若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；
	若有多个线程同时执行写操作，一般都需要考虑线程同步，否则就可能影响线程安全。
	
事例1：
	下面手动创建一个线程不安全的类，然后在多线程中使用这个类，看看有什么效果。
	Count.java：
	public class Count {
		private int num;
		public void count() {
			for(int i = 1; i <= 10; i++) {
				num += i;
			}
			System.out.println(Thread.currentThread().getName() + "-" + num);
		}
	}        
	在这个类中的count方法是计算1一直加到10的和，并输出当前线程名和总和，我们期望的是每个线程都会输出55。
	ThreadTest.java：

	public class ThreadTest {
		public static void main(String[] args) {
			Runnable runnable = new Runnable() {
				Count count = new Count();
				public void run() {
					count.count();
				}
			};
			for(int i = 0; i < 10; i++) {
				new Thread(runnable).start();
			}
		}
	}        
	这里启动了10个线程，看一下输出结果：
	Thread-0-55
	Thread-1-110
	Thread-2-165
	Thread-4-220
	Thread-5-275
	Thread-6-330
	Thread-3-385
	Thread-7-440
	Thread-8-495
	Thread-9-550        
	只有Thread-0线程输出的结果是我们期望的，而输出的是每次都累加的。
	
	那么要想得到我们期望的结果，有几种解决方案：
		1. 将Count中num变成count方法的局部变量；
		public class Count {
			public void count() {
				int num = 0;
				for(int i = 1; i <= 10; i++) {
					num += i;
				}
				System.out.println(Thread.currentThread().getName() + "-" + num);
			}
		}
		2. 将线程类成员变量拿到run方法中，这时count引用是线程内的局部变量；
		public class ThreadTest4 {
			public static void main(String[] args) {
				Runnable runnable = new Runnable() {
					public void run() {
						Count count = new Count();
						count.count();
					}
				};
				for(int i = 0; i < 10; i++) {
					new Thread(runnable).start();
				}
			}
		}         

		3. 每次启动一个线程使用不同的线程类，不推荐。
			上述测试，我们发现，存在成员变量的类用于多线程时是不安全的，不安全体现在这个成员变量可能发生非原子性的操作，
			而变量定义在方法内也就是局部变量是线程安全的。想想在使用struts1时，不推荐创建成员变量，因为action是单例的，
			如果创建了成员变量，就会存在线程不安全的隐患，而struts2是每一次请求都会创建一个action，就不用考虑线程安全的问题。
			所以，日常开发中，通常需要考虑成员变量或者说全局变量在多线程环境下，是否会引发一些问题。

synchronized实现同步：
	以为用了synchronized关键字包住了代码就可以线程同步安全了。测试了下。发现是完全的错了。synchronized必须正确的使用才是真正的线程安全。
	*工作中犯这种错误是不可原谅的，要知道使用synchronized关键字的地方都是数据敏感的！
	
package com.johnny.javase.thread.sync;

/**
 * 类 编 号：
 * 类 名 称：User
 * 内容摘要：synchronized实现同步
 * 完成日期：2016年9月9日
 * 编码作者：JohnnyHuang 黄福强
 */
public class User {
	private static int age = 0;

	public synchronized void print(String user) throws InterruptedException {
		// 结论：同步加在非静态方法 - 加锁 对多线程中下同一对象有作用，对不同对象没作用
		doPrint(user);
	}

	public void print2(String name,User user) throws InterruptedException {
		//结论：synchronized 同步块锁定对象，根据 锁定目标在不同对象间是否相等，判断是否起作用
		//如果多线程下不同对象间调用该方法的锁定目标都相等，加锁在不同对象间有效，否则无效
		synchronized (user) {
			doPrint(name);
		}
	}
	
	private byte[] lock = new byte[0]; // 特殊的instance变量

	public void print7(String user) throws InterruptedException {
		//结论：成员变量  -  加锁 对多线程中下同一对象有作用，对不同对象没作用
		synchronized (lock) {
			doPrint(user);
		}
	}
	
	public void print5(String user) throws InterruptedException {
		//结论：同步 当前对象  -  加锁 对多线程中下同一对象有作用，对不同对象没作用
		synchronized (this) {
			doPrint(user);
		}
	}

	public void print3(String user) throws InterruptedException {
		//结论：同步 Class对象  -  加锁	对多线程中下同一对象，对不同对象 都有作用
		synchronized (User.class) {
			doPrint(user);
		}
	}

	public void print4(String user) throws InterruptedException {
		//结论：同步 Class对象  -  加锁	对多线程中下同一对象，对不同对象 都有作用
		User user2 = new User();
		synchronized (user2.getClass()) {
			doPrint(user);
		}
	}

	public synchronized static void print6(String user) throws InterruptedException {
		//结论：同步 static方法  -  加锁	对多线程中下同一对象，对不同对象 都有作用
		for (int i = 0; i < 10; i++) {
			Thread.sleep(50);
			System.out.println(user + " say" + age++);
		}
	}
	

	
	public void doPrint(String name) throws InterruptedException{
		for (int i = 0; i < 10; i++) {
			Thread.sleep(50);
			System.out.println(name + " say" + age++);
		}
	}

}


package com.johnny.javase.thread.sync;

/**
 * 类 编 号：
 * 类 名 称：TestSynchronized
 * 内容摘要：synchronized实现同步
 * 完成日期：2016年9月9日
 * 编码作者：JohnnyHuang 黄福强
 */
public class TestSynchronized {

	public static void main(String[] args) {
		Runnable run1 = new Runnable() {
			User user = new User();//多线程下同一对象
			@Override
			public void run() {
				try {
					//多线程下不同对象
					User user2 = new User();
					user2.print6(Thread.currentThread().getName());
				}
				catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		};

		Thread t1 = new Thread(run1, "线程1");
		Thread t2 = new Thread(run1, "线程2");

		t1.start();
		t2.start();
	}

}
	