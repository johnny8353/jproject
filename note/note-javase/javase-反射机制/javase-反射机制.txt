JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；
这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。

JAVA反射（放射）机制：“程序运行时，允许改变程序结构或变量类型，这种语言称为动态语言”。从这个观点看，Perl，Python，Ruby是动态语言，C++，Java，C#不是动态语言。
但是JAVA有着一个非常突出的动态相关机制：Reflection，用在Java身上指的是我们可以于运行时加载、探知、使用编译期间完全未知的classes。
换句话说，Java程序可以加载一个运行时才得知名称的class，获悉其完整构造（但不包括methods定义），并生成其对象实体、或对其fields设值、或唤起其methods。

*Java反射机制主要提供了以下功能： 
	-在运行时判断任意一个对象所属的类；
	-在运行时构造任意一个类的对象；
	-在运行时判断任意一个类所具有的成员变量和方法；
	-在运行时调用任意一个对象的方法；
	-生成动态代理。


Java Reflection
     Reflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法
Java反射机制提供的功能
	在运行时判断任意一个对象所属的类
	在运行时构造任意一个类的对象
	在运行时判断任意一个类所具有的成员变量和方法
	在运行时调用任意一个对象的成员变量和方法
	生成动态代理
	
Java反射机制研究及应用
	反射相关的主要API：
	java.lang.Class:代表一个类
	java.lang.reflect.Method:代表类的方法
	java.lang.reflect.Field:代表类的成员变量
	java.lang.reflect.Constructor:代表类的构造方法
	。。。

	
一、Class 类
	在Object类中定义了以下的方法，此方法将被所有子类继承：
	●  public final Class getClass()
	
	以上的方法返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称。
	对照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个类的有关信息。
	Class本身也是一个类
	Class 对象只能由系统建立对象
	一个类在 JVM 中只会有一个Class实例 
	-一个Class对象对应的是一个加载到JVM中的一个.class文件
	-每个类的实例都会记得自己是由哪个 Class 实例所生成
	-*通过Class可以完整地得到一个类中的完整结构 
	
	实例化Class类对象(四种方法)
		1）前提：若已知具体的类，通过类的class属性获取，该方法 
	                    最为安全可靠，程序性能最高
		       实例：Class clazz = String.class;
		2）前提：已知某个类的实例，调用该实例的getClass()方法获取Class对象
		       实例：Class clazz = user.getClass();
		3）前提：已知一个类的全类名，且该类在类路径下，可通过
		       Class类的静态方法forName()获取，可能抛出ClassNotFoundException
		       实例：Class clazz = Class.forName(“java.lang.String”);
		4）其他方式(不做要求)
		ClassLoader cl = this.getClass().getClassLoader();
		Class clazz4 = cl.loadClass(“类的全类名”);
	了解：类的加载过程	
		当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化。
		    类的加载			将类的class文件读入内存，并为之创建一个java.lang.Class对象。此过程由类加载器完成
		    
			|
		    类的连接			将类的二进制数据合并到JRE中
		    |
		 类的初始化			JVM负责对类进行初始化
	
	了解：ClassLoader
		类加载器是用来把类(class)装载进内存的。JVM 规范定义了两种类型的类加载器：启动类加载器(bootstrap)和用户自定义加载器(user-defined class loader)。 
		JVM在运行时会产生3个类加载器组成的初始化加载器层次结构 ，如下图所示：
			引导类加载器：用C++编写的，是JVM自带的类加载器，负责Java平台核心库，用来加载核心类库。该加载器无法直接获取
			扩展类加载器：负责jre/lib/ext目录下的jar包或 –D java.ext.dirs 指定目录下的jar包装入工作库 
			系统类加载器：负责java –classpath 或 –D java.class.path所指的目录下的类与jar包装入工作 ，是最常用的加载器
			
			//1.获取一个系统类加载器
			ClassLoader classloader = ClassLoader.getSystemClassLoader();
			System.out.println(classloader);
			//2.获取系统类加载器的父类加载器，即扩展类加载器
			classloader = classloader.getParent();
			System.out.println(classloader);
			//3.获取扩展类加载器的父类加载器，即引导类加载器
			classloader = classloader.getParent();
			System.out.println(classloader);
			//4.测试当前类由哪个类加载器进行加载
			classloader = 
			Class.forName("exer2.ClassloaderDemo").getClassLoader();
			System.out.println(classloader);
			//5.测试JDK提供的Object类由哪个类加载器加载
			classloader = 
			Class.forName("java.lang.Object").getClassLoader();
			System.out.println(classloader);
			//*6.关于类加载器的一个主要方法：getResourceAsStream(String str):获取类路径下的指定文件的输入流
			InputStream in = null;
			in = this.getClass().getClassLoader().getResourceAsStream("exer2\\test.properties");
			System.out.println(in);

二、创建类对象并获取类的完整结构
	有了Class对象可以做些什么呢？？
	2.1.创建类的对象：调用Class对象的newInstance()方法
		要  求：	
		1）类必须有一个无参数的构造器。
		2）类的构造器的访问权限需要足够。
	
		难道没有无参的构造器就不能创建对象了吗？
		不是！只要在操作的时候明确的调用类中的构造方法，并将参数传递进去之后，才可以实例化操作。步骤如下：
		1）通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类型的构造器
		2）向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。
		3）通过Constructor实例化对象。
		

	2.2通过反射调用类的完整结构
		Field、Method、Constructor、Superclass、Interface、Annotation
		实现的全部接口
		所继承的父类
		全部的构造器
		全部的方法
		全部的Field
		使用反射可以取得：
		1.实现的全部接口
		public Class<?>[] getInterfaces()   
		确定此对象所表示的类或接口实现的接口。 
		
		2.所继承的父类
		public Class<? Super T> getSuperclass()
		返回表示此 Class 所表示的实体（类、接口、基本类型）的父类的 Class。

		3.全部的构造器
		public Constructor<T>[] getConstructors()
		返回此 Class 对象所表示的类的所有public构造方法。
		public Constructor<T>[] getDeclaredConstructors()
		返回此 Class 对象表示的类声明的所有构造方法。
		
		Constructor类中：
		取得修饰符: public int getModifiers();
		取得方法名称: public String getName();
		取得参数的类型：public Class<?>[] getParameterTypes();
		4.全部的方法
		public Method[] getDeclaredMethods()
		返回此Class对象所表示的类或接口的全部方法
		public Method[] getMethods()  
		返回此Class对象所表示的类或接口的public的方法
		
		Method类中：
		public Class<?> getReturnType()取得全部的返回值
		public Class<?>[] getParameterTypes()取得全部的参数
		public int getModifiers()取得修饰符
		public Class<?>[] getExceptionTypes()取得异常信息
		
		5.全部的Field
		public Field[] getFields() 
		返回此Class对象所表示的类或接口的public的Field。
		public Field[] getDeclaredFields() 
		返回此Class对象所表示的类或接口的全部Field。
		
		Field方法中：
		public int getModifiers()  以整数形式返回此Field的修饰符
		public Class<?> getType()  得到Field的属性类型
		public String getName()  返回Field的名称。

		6. Annotation相关

		get Annotation(Class<T> annotationClass) 
		getDeclaredAnnotations() 
		
		7.泛型相关
		获取父类泛型类型：Type getGenericSuperclass()
		泛型类型：ParameterizedType
		获取实际的泛型类型参数数组：getActualTypeArguments()
		
		8.类所在的包    Package getPackage() 

		
		小 结：
		1.在实际的操作中，取得类的信息的操作代码，并不会经常开发。
		2.一定要熟悉java.lang.reflect包的作用，反射机制。
		3.如何取得属性、方法、构造器的名称，修饰符等。
						
		
	2.3、通过反射调用类中的指定方法、指定属性
		1.调用指定方法
		通过反射，调用类中的方法，通过Method类完成。步骤：
			1.通过Class类的getMethod(String name,Class…parameterTypes)方法取得一个Method对象，并设置此方法操作时所需要的参数类型。
			2.之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中传递要设置的obj对象的参数信息。
				说明：
			    1.Object 对应原方法的返回值，若原方法无返回值，此时返回null
			    2.若原方法若为静态方法，此时形参Object obj可为null
			    3.若原方法形参列表为空，则Object[] args为null
			    4.若原方法声明为private,则需要在调用此invoke()方法前，显式调用方法对象的setAccessible(true)方法，将可访问private的方法。
						
		2.调用指定属性
		在反射机制中，可以直接通过Field类操作类中的属性，通过Field类提供的set()和get()方法就可以完成设置和取得属性内容的操作。
			public Field getField(String name) 返回此Class对象表示的类或接口的指定的public的Field。
			public Field getDeclaredField(String name)返回此Class对象表示的类或接口的指定的Field。
			
			在Field中：
			public Object get(Object obj) 取得指定对象obj上此Field的属性内容
			public void set(Object obj,Object value) 设置指定对象obj上此Field的属性内容
			
			注：在类中属性都设置为private的前提下，在使用set()和get()方法时，首先要使用Field类中的setAccessible(true)方法将需要操作的属性设置为可以被外部访问。
			public void setAccessible(true)访问私有属性时，让这个属性可见。 
