单例模式概念及特点
　　	java中单例模式是一种常见的设计模式，单例模式分三种：懒汉式单例、饿汉式单例、登记式单例三种。
　　	单例模式有一下特点：
　　		1、单例类只能有一个实例。
　		2、单例类必须自己自己创建自己的唯一实例。
　　		3、单例类必须给所有其他对象提供这一实例。

　　	单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。
	这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。
	每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。

　　	正是由于这个特点，单例对象通常作为程序中的存放配置信息的载体，因为它能保证其他对象读到一致的信息。例如在某个服务器程序中，该服务器的配置信息可能存放在数据库或文件中，
	这些配置数据由某个单例对象统一读取，服务进程中的其他对象如果要获取这些配置信息，只需访问该单例对象即可。这种方式极大地简化了在复杂环境 下，尤其是多线程环境下的配置管理，
	但是随着应用场景的不同，也可能带来一些同步问题。

典型例题
　　首先看一个经典的单例实现。
	饿汉式单例类
		//饿汉式单例类.在类初始化时，已经自行实例化 
		 public class Singleton1 {
		     //私有的默认构造子
		     private Singleton1() {}
		     //已经自行实例化 
		     private static final Singleton1 single = new Singleton1();
		     //静态工厂方法 
		     public static Singleton1 getInstance() {
		         return single;
		     }
		 }
	 懒汉式单例类
		//懒汉式单例类.在第一次调用的时候实例化 
		 public class Singleton2 {
		     //私有的默认构造子
		     private Singleton2() {}
		     //注意，这里没有final    
		     private static Singleton2 single=null;
		     //静态工厂方法 
		     public synchronized  static Singleton2 getInstance() {
		          if (single == null) {  
		              single = new Singleton2();
		          }  
		         return single;
		     }
		 }
	 登记式单例类.
		 import java.util.HashMap;
		 import java.util.Map;
		 //登记式单例类.
		 //类似Spring里面的方法，将类名注册，下次从里面直接获取。
		 public class Singleton3 {
		     private static Map<String,Singleton3> map = new HashMap<String,Singleton3>();
		     static{
		         Singleton3 single = new Singleton3();
		         map.put(single.getClass().getName(), single);
		     }
		     //保护的默认构造子
		     protected Singleton3(){}
		     //静态工厂方法,返还此类惟一的实例
		     public static Singleton3 getInstance(String name) {
		         if(name == null) {
		             name = Singleton3.class.getName();
		             System.out.println("name == null"+"--->name="+name);
		         }
		         if(map.get(name) == null) {
		             try {
		                 map.put(name, (Singleton3) Class.forName(name).newInstance());
		             } catch (InstantiationException e) {
		                 e.printStackTrace();
		             } catch (IllegalAccessException e) {
		                 e.printStackTrace();
		             } catch (ClassNotFoundException e) {
		                 e.printStackTrace();
		             }
		         }
		         return map.get(name);
		     }
		     //一个示意性的商业方法
		     public String about() {    
		         return "Hello, I am RegSingleton.";    
		     }    
		     public static void main(String[] args) {
		         Singleton3 single3 = Singleton3.getInstance(null);
		         System.out.println(single3.about());
		     }
		 }
	 
	Singleton通过将构造方法限定为private避免了类在外部被实例化，在同一个虚拟机范围内，Singleton的唯一实例只能通过getInstance()方法访问。
	（事实上，通过Java反射机制是能够实例化构造方法为private的类的，那基本上会使所有的Java单例实现失效。此问题在此处不做讨论，姑且掩耳盗铃地认为反射机制不存在。）

　　	但是以上实现没有考虑线程安全问题。所谓线程安全是指：
		如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。
		如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。
		或者说：一个类或者程序所提供的接口对于线程来说是原子操作或者多个线程之间的切换不会导致该接口的执行结果存在二义性,也就是说我们不用考虑同步的问题。
		显然以上实现并不满足线程安全的要求，在并发环境下很可能出现多个Singleton实例。

线程安全的单例模式
	线程安全的单例模式实现有几种思路，个人认为第2种方案最优雅：
		饿汉式、
		借助内部类、
		普通加锁解决、
		双重检测
	但要注意写法,如果单例模式继续扩展为N元单体模式，那就是对象池模式了
	
	1、饿汉式单例
		public class Singleton {
		   private final static Singleton INSTANCE = new Singleton();
		   private Singleton() { }
		   public static Singleton getInstance() {
		      return INSTANCE;
		   }
		}
	2、借助内部类
	属于懒汉式单例，因为Java机制规定，内部类SingletonHolder只有在getInstance()方法第一次调用的时候才会被加载（实现了lazy），
	而且其加载过程是线程安全的。内部类加载的时候实例化一次instance。
		public class Singleton {
		
		   private Singleton() { }
		   private static class SingletonHolder {
		      private final static Singleton INSTANCE = new Singleton();
		   }
		   public static Singleton getInstance() {
		      return SingletonHolder.INSTANCE;
		   }
		}
	3、普通加锁解决
		public class Singleton {
		   private static Singleton instance = null;
		   private Singleton() { }
		
		   public static synchronized Singleton getInstance() {
		      if(instance == null) {
		         instance = new Singleton();
		      }
		      return instance;
		   }
		}
		虽然解决了线程安全问题，但是每个线程调用getInstance都要加锁，我们想要只在第一次调用getInstance时加锁，请看下面的双重检测方案
	4、双重检测，但要注意写法
		public class Singleton {
		   private static Singleton instance = null;
		   private Singleton() { }
		   public static Singleton getInstance() {
		      if(instance == null) {
		         synchronzied(Singleton.class) {
		            Singleton temp = instance;
		            if(temp == null) {
		               temp = new Singleton();
		               instance = temp
		            }
		         }
		      }
		      return instance;
		   }
		}
		由于指令重排序问题，所以不可以直接写成下面这样：
		指令重排序：
			 总结一下就是，对于该线程本身来说，虽然发生了指令重排，但底层机制还是保证了它所以为的指令执行是按程序中所写的顺序执行的。但对于其它线程来说，这是不能保证的。 
			 在没有进行任何同步的情况下，不能在一个线程中对另一个线程的指令执行顺序做任何假设（很容易默认指令执行的顺序与代码中所写的顺序相同，这是错误的）！
		public class Singleton {
		   private static Singleton instance = null;
		   private Singleton() { }
		   public static Singleton getInstance() {
		      if(instance == null) {
		         synchronzied(Singleton.class) {
		            if(instance == null) {
		               instance = new Singleton();
		            }
		         }
		      }
		      return instance;
		   }
		}
		但是如果instance实例变量用volatile修饰就可以了，volatile修饰的话就可以确保instance = new Singleton();对应的指令不会重排序，如下的单例代码也是线程安全的：
		public class Singleton {
		   private static volatile Singleton instance = null;
		   private Singleton() { }
		   public static Singleton getInstance() {
		      if(instance == null) {
		         synchronzied(Singleton.class) {
		            if(instance == null) {
		               instance = new Singleton();
		            }
		         }
		      }
		      return instance;
		   }
		}
		
		
		