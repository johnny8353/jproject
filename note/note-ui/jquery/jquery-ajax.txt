
什么是 AJAX？
	AJAX = 异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。
	简短地说，在不重载整个网页的情况下，AJAX 通过后台加载数据，并在网页上进行显示。
	使用 AJAX 的应用程序案例：谷歌地图、腾讯微博、优酷视频、人人网等等。
		
关于 jQuery 与 AJAX
	jQuery 提供多个与 AJAX 有关的方法。
	通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON - 同时您能够把这些外部数据直接载入网页的被选元素中。
	提示：如果没有 jQuery，AJAX 编程还是有些难度的。
	编写常规的 AJAX 代码并不容易，因为不同的浏览器对 AJAX 的实现并不相同。这意味着您必须编写额外的代码对浏览器进行测试。不过，jQuery 团队为我们解决了这个难题，我们只需要一行简单的代码，就可以实现 AJAX 功能。
	
jQuery load() 方法
	jQuery load() 方法是简单但强大的 AJAX 方法。
	load() 方法从服务器加载数据，并把返回的数据放入被选元素中。
	$(selector).load(URL,data,callback);
		必需的 URL 参数规定您希望加载的 URL。
		可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。
		可选的 callback 参数是 load() 方法完成后所执行的函数名称。
			可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。回调函数可以设置不同的参数：
		    responseTxt - 包含调用成功时的结果内容
		    statusTXT - 包含调用的状态
		    xhr - 包含 XMLHttpRequest 对象
			
	$("#div1").load("demo_test.txt");
	$("#div1").load("demo_test.txt #p1");	-	 "demo_test.txt" 文件中 id="p1" 的元素的内容，加载到指定的 <div> 元素中：
	
	$("#div1").load("demo_test.txt",function(responseTxt,statusTxt,xhr){
		if(statusTxt=="success")
	    	alert("外部内容加载成功！");
	    if(statusTxt=="error")
			alert("Error: "+xhr.status+": "+xhr.statusText);
	});
	
jQuery get() 和 post() 方法
	HTTP 请求：GET vs. POST
	两种在客户端和服务器端进行请求-响应的常用方法是：GET 和 POST。
	    GET - 从指定的资源请求数据
		    GET 请求可被缓存
		    GET 请求保留在浏览器历史记录中
		    GET 请求可被收藏为书签
		    GET 请求不应在处理敏感数据时使用
		    GET 请求有长度限制
		    GET 请求只应当用于取回数据
	    POST - 向指定的资源提交要处理的数据
		    POST 请求不会被缓存
		    POST 请求不会保留在浏览器历史记录中
		    POST 不能被收藏为书签
		    POST 请求对数据长度没有要求
	GET 基本上用于从服务器获得（取回）数据。注释：GET 方法可能返回缓存数据。
	POST 也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据。
	
	jQuery $.get() 方法
		$.get() 方法通过 HTTP GET 请求从服务器上请求数据。
		$.get(URL,callback);
		$.get("demo_test.asp",function(data,status){
			alert("Data: " + data + "\nStatus: " + status);
		});
	
	jQuery $.post() 方法
		$.post("demo_test_post.asp",
		{
			name:"Donald Duck",
		    city:"Duckburg"
		},
		function(data,status){
		    alert("Data: " + data + "\nStatus: " + status);
		});
	
	jQuery 对 Ajax 操作进行了封装, 在 jQuery 中最底层的方法是 $.ajax(), 第二层是 load(), $.get() 和 $.post(), 
	第三层是 $.getScript() 和 $.getJSON()。最好使用 $.ajax()处理复杂的逻辑
	
$.ajax()
	一、$.ajax的一般格式
	$.ajax({
		type: 'POST',
		url: url ,
		data: data ,
		success: success ,
		dataType: dataType
	});
	 
	二、$.ajax的参数描述
	参数 								描述
	url									必需。规定把请求发送到哪个 URL。
	data								可选。映射或字符串值。规定连同请求发送到服务器的数据。
										将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。如果为数组，jQuery 将自动为不同值对应同一个名称。如 {foo:["bar1", "bar2"]} 转换为 '&foo=bar1&foo=bar2'。
	asyc								(默认: true) 默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为=false。
										注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。
	cache								(默认: true,dataType为script时默认为false)
	contentType							(默认: "application/x-www-form-urlencoded") 发送信息至服务器时内容编码类型。默认值适合大多数应用场合。
	dataType							可选。规定预期的服务器响应的数据类型。默认执行智能判断（xml、json、script、text 或 html）。
										*不同数据类型回应success的参数不一样。
	timeout								设置请求超时时间（毫秒）。此设置将覆盖全局设置。
	beforeSend							指定发送请求之前将触发指定的函数，通过该函数我们可以在请求前加一些自定义的请求头或者是请求状态条等，
	dataFilter							在请求成功之后调用。传入返回的数据以及 "dataType" 参数的值。并且必须返回新的数据（可能是处理过的）传递给 success 回调函数。
	success(data, textStatus, jqXHR)	可选。请求成功时执行的回调函数。
	error								(默认: 自动判断 (xml 或 html)) 请求失败时调用时间。参数有以下三个：XMLHttpRequest
										对象、错误信息、（可选）捕获的错误对象。如果发生了错误，错误信息（第二个参数）除了得到null之外，还可能是"timeout", "error", "notmodified" 和 "parsererror"。
	complete							指定ajax交互完成后的回调函数，该函数将在succes或error回调函数之后被调用。

	三、$.ajax需要注意的一些地方：
	  1.data主要方式有三种，html拼接的，json数组，form表单经serialize()序列化的；通过dataType指定，不指定智能判断。
	  2.$.ajax只提交form以文本方式，如果异步提交包含<file>上传是传过不过去,需要使用jquery.form.js的$.ajaxSubmit
	  
	  
	//1.$.ajax带json数据的异步请求
	$.ajax( {  
		url:'productManager_reverseUpdate',// 跳转到 action  
		data:{  
				sendTime:(new Date()).getTime(),
				pass2 : pass2  
		},  
		type:'post',  
		async : true, //默认为true 异步   
		cache:false,  //默认: true
		dataType:'json',  
		success:function(data) {  
			if(data.success){
				alert("操作成功！！！");
			}else{
				alert("操作失败，请联系开发人员！！！");
			}
		},  
		error : function() {
			  alert("发生错误，请联系管理员！！！");
		}
	});

	//2.$.ajax序列化表格内容为字符串的异步请求
	function noTips(){  
		var formParam = $("#form1").serialize();//序列化表格内容为字符串  
		$.ajax({  
			type:'post',      
			url:'Notice_noTipsNotice',  
			data:formParam,  
			cache:false,  
			dataType:'json',  
			success:function(data){  
			}  
		});  
	}
	
serialize() 方法
	serialize() 方法通过序列化表单值，创建 URL 编码文本字符串。
	您可以选择一个或多个表单元素（比如 input 及/或 文本框），或者 form 元素本身。
	序列化的值可在生成 AJAX 请求时用于 URL 查询字符串中。
	$(selector).serialize()
	$("div").text($("form").serialize());
	.serialize() 方法可以操作已选取个别表单元素的 jQuery 对象，比如 <input>, <textarea> 以及 <select>。不过，选择 <form> 标签本身进行序列化一般更容易些：
	$('form').submit(function() {
	  alert($(this).serialize());	->	a=1&b=2&c=3&d=4&e=5
	  return false;
	});
	
serializeArray() 方法
	serializeArray() 方法通过序列化表单值来创建对象数组（名称和值）。
	您可以选择一个或多个表单元素（比如 input 及/或 textarea），或者 form 元素本身。
	$(selector).serializeArray()	
	
	x=$("form").serializeArray();
	$.each(x, function(i, field){
		$("#results").append(field.name + ":" + field.value + " ");		->	FirstName:Bill LastName:Gates
	});
	serializeArray() 方法序列化表单元素（类似 .serialize() 方法），返回 JSON 数据结构数据。
	**此方法返回的是 JSON 对象而非 JSON 字符串。需要使用插件或者第三方库进行字符串化操作。
	返回的 JSON 对象是由一个对象数组组成的，其中每个对象包含一个或两个名值对 —— name 参数和 value 参数（如果 value 不为空的话）。举例来说：
	[ 
	  {name: 'firstname', value: 'Hello'}, 
	  {name: 'lastname', value: 'World'},
	  {name: 'alias'}, // 值为空
	]
	
	.serializeArray() 方法使用了 W3C 关于 successful controls（有效控件）的标准来检测哪些元素应当包括在内。
	特别说明，元素不能被禁用（禁用的元素不会被包括在内），并且元素应当有含有 name 属性。提交按钮的值也不会被序列化。文件选择元素的数据也不会被序列化。
	该方法可以对已选择单独表单元素的对象进行操作，比如 <input>, <textarea>, 和 <select>。不过，更方便的方法是，直接选择 <form> 标签自身来进行序列化操作。
	console.log($(this).serializeArray());
	var fields = $("select, :radio").serializeArray();
	jQuery.each( fields, function(i, field){
		$("#results").append(field.value + " ");
	});


	
	