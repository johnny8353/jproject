8：流程实例、任务的执行
8.1：流程图
8.2：部署流程定义
	/**部署流程定义（从zip）*/
	@Test
	public void deploymentProcessDefinition_zip(){
		InputStream in = this.getClass().getClassLoader().getResourceAsStream("diagrams/helloworld.zip");
		ZipInputStream zipInputStream = new ZipInputStream(in);
		Deployment deployment = processEngine.getRepositoryService()//与流程定义和部署对象相关的Service
						.createDeployment()//创建一个部署对象
						.name("流程定义")//添加部署的名称
						.addZipInputStream(zipInputStream)//指定zip格式的文件完成部署
						.deploy();//完成部署
		System.out.println("部署ID："+deployment.getId());//
		System.out.println("部署名称："+deployment.getName());//
	}
	
8.3：启动流程实例
 	/**启动流程实例*/
	@Test
	public void startProcessInstance(){
		//流程定义的key
		String processDefinitionKey = "helloworld";
		ProcessInstance pi = processEngine.getRuntimeService()//与正在执行的流程实例和执行对象相关的Service
						.startProcessInstanceByKey(processDefinitionKey);//使用流程定义的key启动流程实例，key对应helloworld.bpmn文件中id的属性值，使用key值启动，默认是按照最新版本的流程定义启动
		System.out.println("流程实例ID:"+pi.getId());//流程实例ID    101
		System.out.println("流程定义ID:"+pi.getProcessDefinitionId());//流程定义ID   helloworld:1:4
	}
	说明：
	1)	操作数据库的act_ru_execution表,如果是用户任务节点，同时也会在act_ru_task添加一条记录

8.4：查询我的个人任务
 
	 /**查询当前人的个人任务*/
	@Test
	public void findMyPersonalTask(){
		String assignee = "王五";
		List<Task> list = processEngine.getTaskService()//与正在执行的任务管理相关的Service
						.createTaskQuery()//创建任务查询对象
						/**查询条件（where部分）*/
						.taskAssignee(assignee)//指定个人任务查询，指定办理人
//						.taskCandidateUser(candidateUser)//组任务的办理人查询
//						.processDefinitionId(processDefinitionId)//使用流程定义ID查询
//						.processInstanceId(processInstanceId)//使用流程实例ID查询
//						.executionId(executionId)//使用执行对象ID查询
						/**排序*/
						.orderByTaskCreateTime().asc()//使用创建时间的升序排列
						/**返回结果集*/
//						.singleResult()//返回惟一结果集
//						.count()//返回结果集的数量
//						.listPage(firstResult, maxResults);//分页查询
						.list();//返回列表
		if(list!=null && list.size()>0){
			for(Task task:list){
				System.out.println("任务ID:"+task.getId());
				System.out.println("任务名称:"+task.getName());
				System.out.println("任务的创建时间:"+task.getCreateTime());
				System.out.println("任务的办理人:"+task.getAssignee());
				System.out.println("流程实例ID："+task.getProcessInstanceId());
				System.out.println("执行对象ID:"+task.getExecutionId());
				System.out.println("流程定义ID:"+task.getProcessDefinitionId());
				System.out.println("########################################################");
			}
		}
	}
	说明：
	1)	因为是任务查询，所以从processEngine中应该得到TaskService
	2)	使用TaskService获取到任务查询对象TaskQuery
	3)	为查询对象添加查询过滤条件，使用taskAssignee指定任务的办理者（即查询指定用户的代办任务），同时可以添加分页排序等过滤条件
	4)	调用list方法执行查询，返回办理者为指定用户的任务列表
	5)	任务ID、名称、办理人、创建时间可以从act_ru_task表中查到。
	6)	Execution与ProcessInstance见5.6和5.7章节的介绍。在这种情况下，ProcessInstance相当于Execution
	7)	如果assignee属性为部门经理，结果为空。因为现在流程只到了”填写请假申请”阶段，后面的任务还没有执行，即在数据库中没有部门经理可以办理的任务，所以查询不到。
	8)	一个Task节点和Execution节点是1对1的情况，在task对象中使用Execution_来表示他们之间的关系
	9)	任务ID在数据库表act_ru_task中对应“ID_”列
	
	附加：
	在activiti任务中，主要分为两大类查询任务（个人任务和组任务）：
	1.确切指定了办理者的任务，这个任务将成为指定者的私有任务，即个人任务。
	2.无法指定具体的某一个人来办理的任务，可以把任务分配给几个人或者一到	多个小组，让这个范围内的用户可以选择性（如有空余时间时）来办理这类任务，即组任务。
	先知道个人任务的查询和办理，组任务的操作后面讲
	
8.5：办理任务
 	/**完成我的任务*/
	@Test
	public void completeMyPersonalTask(){
		//任务ID
		String taskId = "1202";
		processEngine.getTaskService()//与正在执行的任务管理相关的Service
					.complete(taskId);
		System.out.println("完成任务：任务ID："+taskId);
	}

	说明：
	1)	是办理任务，所以从ProcessEngine得到的是TaskService。
	2)	当执行完这段代码，再以员工的身份去执行查询的时候，会发现这个时候已经没有数据了，因为正在执行的任务中没有数据。
	3)	对于执行完的任务，activiti将从act_ru_task表中删除该任务，下一个任务会被插入进来。
	4)	以”部门经理”的身份进行查询，可以查到结果。因为流程执行到部门经理审批这个节点了。
	5)	再执行办理任务代码，执行完以后以”部门经理”身份进行查询，没有结果。
	6)	重复第3和4步直到流程执行完。

8.6：查询流程状态（判断流程正在执行，还是结束）
 	/**查询流程状态（判断流程正在执行，还是结束）*/
	@Test
	public void isProcessEnd(){
		String processInstanceId = "1001";
		ProcessInstance pi = processEngine.getRuntimeService()//表示正在执行的流程实例和执行对象
						.createProcessInstanceQuery()//创建流程实例查询
						.processInstanceId(processInstanceId)//使用流程实例ID查询
						.singleResult();
		if(pi==null){
			System.out.println("流程已经结束");
		}
		else{
			System.out.println("流程没有结束");
		}
	}
	在流程执行的过程中，创建的流程实例ID在整个过程中都不会变，当流程结束后，流程实例将会在正在执行的执行对象表中（act_ru_execution）被删除
	说明：
	1)	因为是查询流程实例，所以先获取runtimeService
	2)	创建流程实例查询对象，设置实例ID过滤参数
	3)	由于一个流程实例ID只对应一个实例，使用singleResult执行查询返回一个唯一的结果，如果结果数量大于1，则抛出异常
	4)	判断指定ID的实例是否存在，如果结果为空，则代表流程结束，实例在正在执行的执行对象表中已被删除，转换成历史数据。
	
	
8.7：附加功能：查询历史任务（后面讲）
	/**查询历史任务（后面讲）*/
	@Test
	public void findHistoryTask(){
		String taskAssignee = "张三";
		List<HistoricTaskInstance> list = processEngine.getHistoryService()//与历史数据（历史表）相关的Service
						.createHistoricTaskInstanceQuery()//创建历史任务实例查询
						.taskAssignee(taskAssignee)//指定历史任务的办理人
						.list();
		if(list!=null && list.size()>0){
			for(HistoricTaskInstance hti:list){
				System.out.println(hti.getId()+"    "+hti.getName()+"    "+hti.getProcessInstanceId()+"   "+hti.getStartTime()+"   "+hti.getEndTime()+"   "+hti.getDurationInMillis());
				System.out.println("################################");
			}
		}
	}

8.8：附加功能：查询历史流程实例（后面讲）
	/**查询历史流程实例（后面讲）*/
	@Test
	public void findHistoryProcessInstance(){
		String processInstanceId = "1001";
		HistoricProcessInstance hpi = processEngine.getHistoryService()//与历史数据（历史表）相关的Service
						.createHistoricProcessInstanceQuery()//创建历史流程实例查询
						.processInstanceId(processInstanceId)//使用流程实例ID查询
						.singleResult();
		System.out.println(hpi.getId()+"    "+hpi.getProcessDefinitionId()+"    "+hpi.getStartTime()+"    "+hpi.getEndTime()+"     "+hpi.getDurationInMillis());
	} 

8.9：总结
	Execution   执行对象
	 按流程定义的规则执行一次的过程.
	 对应的表：
	  	act_ru_execution： 	正在执行的信息
	  	act_hi_procinst：	已经执行完的历史流程实例信息
	  	act_hi_actinst：		存放历史所有完成的活动
		ProcessInstance  	流程实例
							 特指流程从开始到结束的那个最大的执行分支，一个执行的流程中，流程实例只有1个。
	
	注意
	    （1）如果是单例流程，执行对象ID就是流程实例ID
	    （2）如果一个流程有分支和聚合，那么执行对象ID和流程实例ID就不相同
	    （3）一个流程中，流程实例只有1个，执行对象可以存在多个。
	
	Task 任务
	 执行到某任务环节时生成的任务信息。
	 对应的表：
		act_ru_task：正在执行的任务信息
		act_hi_taskinst：已经执行完的历史任务信息
		