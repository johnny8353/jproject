什么是 GitHub
	GitHub 是为开发者提供 Git 仓库的托管服务。这是一个让开发者与朋友、同事、同学及陌生人共享代码的完美场所。

并不只是 Git 仓库的托管服务
	GitHub 除提供 Git 仓库的托管服务外，还为开发者或团队提供了一系列功能，帮助其高效率、高品质地进行代码编写。

GitHub 的使用情况
	截至 2013 年 12 月， GitHub 托管的仓库数已超过 1000 万 。全世界无时无刻都有开发者在使用它

GitHub 与 Git 的区别
	在此讲解一下 GitHub 与 Git 注 a 的区别。GitHub 与 Git 是完全不同的两个东西。在 Git 中，开发者将源代码存入名叫“Git 仓库”的资料库中并加以使用。
	而 GitHub 则是在网络上提供 Git 仓库的一项服务。也就是说，GitHub 上公开的软件源代码全都由 Git 进行管理。理解 Git，是熟练运用 GitHub 的关键所在。

使用 GitHub 会带来哪些变化
	GitHub 的出现已使当今世界的软件开发现场发生了翻天覆地的变化。在这场可称之为革命的变革当中，中国也毫不例外地受到了影响。
	本章中，我们将简单介绍将 GitHub 导入日常开发后会带来哪些变化，供尚未正式使用 GitHub 的开发者们加以了解。

协作形式变化
	此前，用于辅助多人协同工作的软件层出不穷，然而它们中的大部分又一个个退出了历史的舞台。在这类软件中，群件（Groupware）和
	CRM（Customer Relationship Management，顾客关系管理）等脱颖而出，被全世界的商业人士所用。您所在的公司想必也导入了这类软件。
	但是，在以程序员为代表的软件开发者之间，一直都没有一个用来辅助多人协同编程的关键性软件。因此软件开发者们往往要将版本管理系统、 BUG 跟踪系统、
	代码审查工具、邮件列表、 IRC 等众多工具组合在一起，以实现多人协作。开发者们已对这种软件开发协作模式司空见惯，然而 GitHub 的出现为其带来了巨大变化。下面，我们就来介绍 GitHub 的几项功能。

在开发者之间引发化学反应的 Pull Request
	在 GitHub 这个聚集了世界各地软件开发者的地方，有个在过去绝对是无法想象的事正在飞速地进行着——素未谋面的开发者们隔着半个地球的距离共同开发软件。
	我们不妨称之为开发者之间的化学反应吧。这种事成为可能，都要归功于一个名为 Pull Request 的功能。
	
	Pull Request 是指开发者在本地对源代码进行更改后，向 GitHub 中托管的 Git 仓库请求合并的功能。开发者可以在 Pull Request 上通过评论交流，
	例如“修正了 BUG，可以合并一下吗？”以及“我试着做了这样一个新功能，可以合并一下吗？”等。通过这个功能，开发者可以轻松更改源代码，并公开更改的细节，然后向仓库提交合并请求。
	而且，如果请求的更改与项目的初衷相违，也可以选择拒绝合并。GitHub 的 Pull Request 不但能轻松查看源代码的前后差别，还可以对指定的一行代码进行评论（图 1.4）。
	通过这一功能，开发者们可以针对具体的代码进行讨论，使代码审查的工作变得前所未有地惬意。
 

对特定用户进行评论
	方便和快捷并不是 Pull Request 的专利。任务管理和 BUG 报告可以通过 Issue 进行交互。如果想让特定用户来看，只要用“ @ 用户名”的格式书写，
	对方便会接到通知（Notifications） A，查看 Issue（图 1.5）。由于也提供了 Wiki 功能，开发者可以轻松创建文档，进行公开、共享。
	Wiki 更新的历史记录也在 Git 中管理，可以让用户轻松更改。
	 
GitHub Flavored Markdown
	在 GitHub 上， 用 户 所 有 用 文 字 输 入 的 功 能 都 可 以 用 GitHubFlavored Markdown（GFM）语法进行描述。这个语法可以让标记变得简单，以此写出的评论与文档也会更容易理解。
	只记住一个语法便能在多种交流中使用，何乐而不为呢 A ？它还有一个很特别的功能，那就是可以在评论中添加文字表情，使用户间的交流更加顺利。
	随着 GitHub 的普及，正在有越来越多的服务开始兼容 Markdown语法。

	GitHub 中可使用的描述方法并不止“@ 用户名”一种。输入“@ 组织名”可以让属于该 Organization（组织）的所有成员收到通知注 a。输入“@ 组织名 / 团队”可以让该团队的所有成员收到通知。
	这就是同时向多人发送通知的方法。输入“# 编号”，会连接到该仓库所对应的 Issue 编号。输入“用户名 / 仓库名 # 编号”则可以连接到指定仓库所对应的 Issue编号。
	只要按照这类特定格式书写便会自动创建链接。多加利用上述这些功能，可以让交流更有效率。

能看到更多其他团队的软件
	GitHub 快捷的环境为开发者带来的合作伙伴，并不只局限于自己团队内部。只要将感兴趣的仓库添加至 Watch 中，就可以在 News Feed 查看该仓库的相关信息（图 1.6）。

	比如，将全公司共用代码库的仓库添加到 Watch 中，便能在第一时间掌握最新版本的新功能或 BUG 修正的信息。当然，您也可以参与到讨论中去，积极地提出意见。
	如有必要，还可以通过 Pull Request 提交代码。将隔壁团队正在开发的仓库添加到 Watch 中，就可以每天查看他们都在开发什么功能。一旦发现有用的功能或者库，可以立刻运用到自己的开发团队。
	如果能进一步交流，分割出共用的库，从而建立起新的仓库，便成了不同开发者团队间协作的美谈。

与开源软件相同的开发模式
	将 GitHub 运用到企业中，便会带来与开源软件开发相同的开发模式。已经熟悉开源软件开发的开发者不必专门去学习企业独自采用的工具，就可以直接加入到开发行列。
	反过来说，只要在企业中运用 GitHub，即便是刚刚入职成为程序员的应届毕业生，也可以很快投身到开源软件开发的世界中。也就是说，开源软件世界的软件开发与企业内的软件开发将不再有隔阂。
	在某些企业中，这两者的区别恐怕就是仓库公开与否的区别了。

社会化编程
	GitHub 这一服务，为开源世界带来了社会化编程的概念。这一概念影响了全世界众多程序员，说其是软件开发方法的一次革命都不为过。在这里，我们将详细解说社会化编程的概念。

	GitHub 这一服务创造了社会化编程的概念。随着 GitHub 的出现，软件开发者们才真正意义上拥有了源代码。世界上任何人都可以比从前更加容易地获得源代码，将其自由更改并加以公开。
	如今，世界众多程序员都在通过 GitHub 公开源代码，同时利用 GitHub 支持着自己日常的软件开发。
	在 GitHub 出现之前，软件开发中只有一小部分人拥有更改源代码的权利，这个特权阶级掌握着开发的主导权。开发者在改写、发布源代码之外，往往需要花更多时间和精力去说服这个特权阶级。
	这导致了许多起初效率很高的流行软件越发保守化，最终被时代所抛弃。但是， GitHub 的出现为软件开发者的世界带来了真正意义上的“民主”，让所有人都平等地拥有了更改源代码的权利。
	这在软件开发领域是一场巨大的革命。而革命领导者 GitHub 的口号便是“社会化编程”。
	
为什么需要社会化编程
	当今的 IT 业界已经没有了终身雇佣制，人才流动性日益增大。可以说，每个月我们都能在一些著名开发者的博客中看到这种现象：月末刚发布“辞职了”的消息，月初就又“入职了”。
	那么，如果您是程序员的面试官，两者之间您会选择哪一位呢？
	● 能查看到以前所写代码的程序员 or 无法查看的程序员
	● 精通最新软件的程序员 or 不精通的程序员
	● 对语言或软件差异带来的不同文化有所理解的程序员 or 不理解的程序员
	为了不成为后一种程序员，理解社会化编程和 GitHub 至关重要。
	
	不要闭目塞听，要接触不同的文化
		在工作中接触非公开代码的职业程序员们，更应该接触世界上的不同文化，拓展见闻。如果只在公司这一封闭的小世界中敲代码，往往在不知不觉间，手中的技术就变得陈腐不堪了。
		放眼世界，注意那些日新月异的源代码、技术、设计以及文化，会对自己编写的源代码及成果带来巨大影响。笔者自身也曾在知名框架的实现中受到启发，良好地实现了公司内部开发的软件。
	会写代码的程序员更受青睐
		在软件开发行业中， Web 业界的变化尤其激烈，能实际编写源代码的程序员大受青睐。在过去，程序员只需有简单的编程经验，用人单位更重视其人品、协调性、管理能力。
		但如今，能踏踏实实编写出代码的职业程序员反而更受欢迎。这是由于近年来随着技术的不断发展，开发一项服务需要用到多种编程语言和技术，以求兼容多种硬件设备。在这种背景下，判断
		一个求职者能否编写项目所需的源代码，最切实可行的办法就是看他实际写出的东西。
		如今， GitHub 的出现已经让所有人平等拥有公开源代码的权利。看看 Facebook 或 Twitter 能了解一个人的品性，而看看 GitHub 就能了解一个程序员的实力。
		今后，进行社会化编程的程序员会越来越多，从而成为一种普遍现象。在不远的将来，应聘的成功与否将取决于您曾经编写过的代码。因此，面向全世界的代码公开必将越发重要。
		以编写代码为生的职业程序员们，更应该进行社会化编程。
		
	GitHub 最大的特征是“面向人”
		这里讲解一下 GitHub 与单纯的仓库托管服务的不同之处，在笔者看来这是一个重点问题。GitHub 与以往的仓库托管服务最大的不同点，就在于它以人为中心。以往的仓库托管服务都是以项目为中心，每个项目就是一个信息封闭的世界。虽然能够知道一个仓库的管理者是谁，但这个管理者还在做哪些事，我们就不得而知了。GitHub 除项目之外，还可以把注意力集中到人身上。我们不但能阅览一个人公开的所有源代码，只要查看其控制面板中的 News Feed，还能知道他对哪些仓库感兴趣，什么时候做过提交等。一个人在 GitHub进行的开发是一目了然的 A。您可以将注意力聚焦到感兴趣的人身上。他既可以是您崇拜已久的超级黑客，也可以是同校同学或公司的同事。能同时关注人与代码，是 GitHub 为我们带来的一个新的世界。
	
