http://www.w3school.com.cn/wsdl/index.asp

Web Service好比一个服务供应商，给其他厂家提供基础服务，其他厂家再将这个服务包装成自己的产品或者服务提供给别人或自己使用。
既然两个公司需要合作，不可能靠一句话就可以的，就需要一些标准和规范的东西来实现。那么：
	-SOAP 就像两个公司之间签的合同，约束双方按一定规矩和标准办事。
	-WSDL 则像说明书，告诉别人你有什么，能给别人提供什么服务。
	
WSDL简介
	WSDL（网络服务描述语言，Web Services Description Language）是一门基于 XML 的语言，用于描述 Web Services 以及如何对它们进行访问。
	
	什么是 WSDL?
		WSDL 指网络服务描述语言
		WSDL 使用 XML 编写
		WSDL 是一种 XML 文档
		WSDL 用于描述网络服务
		WSDL 也可用于定位网络服务
		WSDL 还不是 W3C 标准
	WSDL 可描述网络服务（Web Services）
		WSDL 指网络服务描述语言 (Web Services Description Language)。
		WSDL 是一种使用 XML 编写的文档。这种文档可描述某个 Web service。它可规定服务的位置，以及此服务提供的操作（或方法）。
	在 W3C 的 WSDL 发展史
		在 2001 年 3 月，WSDL 1.1 被 IBM、微软作为一个 W3C 记录（W3C note）提交到有关 XML 协议的 W3C XML 活动，用于描述网络服务。
		（W3C 记录仅供讨论。一项 W3C 记录的发布并不代表它已被 W3C 或 W3C 团队亦或任何 W3C 成员认可。）
		在 2002 年 7 月，W3C 发布了第一个 WSDL 1.2 工作草案。
		
WSDL 文档
	WSDL 文档仅仅是一个简单的 XML 文档。
		它包含一系列描述某个 web service 的定义。
	WSDL 文档结构
		WSDL 文档是利用这些主要的元素来描述某个 web service 的：
		元素			定义
		<portType>	web service 执行的操作
		<message>	web service 使用的消息
		<types>		web service 使用的数据类型
		<binding>	web service 使用的通信协议
		一个 WSDL 文档的主要结构是类似这样的：
		<definitions>
			
			<types>
			   definition of types........
			</types>
			
			<message>
			   definition of a message....
			</message>
			
			<portType>
			   definition of a port.......
			</portType>
			
			<binding>
			   definition of a binding....
			</binding>
		
		</definitions>
		WSDL 文档可包含其它的元素，比如 extension 元素，以及一个 service 元素，此元素可把若干个 web services 的定义组合在一个单一的 WSDL 文档中。
	WSDL 端口
		<portType> 元素是最重要的 WSDL 元素。
		它可描述一个 web service、可被执行的操作，以及相关的消息。
		可以把 <portType> 元素比作传统编程语言中的一个函数库（或一个模块、或一个类）。
	WSDL 消息
		<message> 元素定义一个操作的数据元素。
		每个消息均由一个或多个部件组成。可以把这些部件比作传统编程语言中一个函数调用的参数。
	WSDL types
		<types> 元素定义 web service 使用的数据类型。
		为了最大程度的平台中立性，WSDL 使用 XML Schema 语法来定义数据类型。
	WSDL Bindings
		<binding> 元素为每个端口定义消息格式和协议细节。
	WSDL 实例
		这是某个 WSDL 文档的简化的片段：
		<message name="getTermRequest">
		   <part name="term" type="xs:string"/>
		</message>
		
		<message name="getTermResponse">
		   <part name="value" type="xs:string"/>
		</message>
		
		<portType name="glossaryTerms">
		  <operation name="getTerm">
		        <input message="getTermRequest"/>
		        <output message="getTermResponse"/>
		  </operation>
		</portType>
		在这个例子中，<portType> 元素把 "glossaryTerms" 定义为某个端口的名称，把 "getTerm" 定义为某个操作的名称。
		操作 "getTerm" 拥有一个名为 "getTermRequest" 的输入消息，以及一个名为 "getTermResponse" 的输出消息。
		<message> 元素可定义每个消息的部件，以及相关联的数据类型。
		对比传统的编程，glossaryTerms 是一个函数库，而 "getTerm" 是带有输入参数 "getTermRequest" 和返回参数 getTermResponse 的一个函数。
			
WSDL 端口
	WSDL 端口可描述由某个 web service 提供的界面（合法操作）。
	WSDL 端口
		<portType> 元素是最重要的 WSDL 元素。
		它可描述一个 web service、可被执行的操作，以及相关的消息。
		端口定义了指向某个 web service 的连接点。可以把该元素比作传统编程语言中的一个函数库（或一个模块、或一个类），而把每个操作比作传统编程语言中的一个函数。
	操作类型
		请求-响应是最普通的操作类型，不过 WSDL 定义了四种类型：
		类型					定义
		One-way				此操作可接受消息，但不会返回响应。
		Request-response	此操作可接受一个请求并会返回一个响应
		Solicit-response	此操作可发送一个请求，并会等待一个响应。
		Notification		此操作可发送一条消息，但不会等待响应。
	One-Way 操作
		一个 one-way 操作的例子：
		<message name="newTermValues">
		   <part name="term" type="xs:string"/>
		   <part name="value" type="xs:string"/>
		</message>
	
		<portType name="glossaryTerms">
		   <operation name="setTerm">
		      <input name="newTerm" message="newTermValues"/>
		   </operation>
		</portType >
		在这个例子中，端口 "glossaryTerms" 定义了一个名为 "setTerm" 的 one-way 操作。
		这个 "setTerm" 操作可接受新术语表项目消息的输入，这些消息使用一条名为 "newTermValues" 的消息，此消息带有输入参数 "term" 和 "value"。不过，没有为这个操作定义任何输出。
	Request-Response 操作
		一个 request-response 操作的例子：
		<message name="getTermRequest">
		   <part name="term" type="xs:string"/>
		</message>
		
		<message name="getTermResponse">
		   <part name="value" type="xs:string"/>
		</message>
		
		<portType name="glossaryTerms">
		  <operation name="getTerm">
		    <input message="getTermRequest"/>
		    <output message="getTermResponse"/>
		  </operation>
		</portType>
		在这个例子中，端口 "glossaryTerms" 定义了一个名为 "getTerm" 的 request-response 操作。
		"getTerm" 操作会请求一个名为 "getTermRequest" 的输入消息，此消息带有一个名为 "term" 的参数，并将返回一个名为 "getTermResponse" 的输出消息，此消息带有一个名为 "value" 的参数。		

WSDL 绑定
	WSDL 绑定可为 web service 定义消息格式和协议细节。
	绑定到 SOAP
		一个 请求 - 响应 操作的例子：
		<message name="getTermRequest">
		   <part name="term" type="xs:string" />
		</message>
		
		<message name="getTermResponse">
		   <part name="value" type="xs:string" />
		</message>
		
		<portType name="glossaryTerms">
		  <operation name="getTerm">
		      <input message="getTermRequest" />
		      <output message="getTermResponse" />
		  </operation>
		</portType>
		
		<binding type="glossaryTerms" name="b1">
		<soap:binding style="document"
		transport="http://schemas.xmlsoap.org/soap/http" />
		  <operation>
		    <soap:operation
		     soapAction="http://example.com/getTerm" />
		    <input>
		      <soap:body use="literal" />
		    </input>
		    <output>
		      <soap:body use="literal" />
		    </output>
		  </operation>
		</binding>
		binding 元素有两个属性 - name 属性和 type 属性。
			name 属性定义 binding 的名称，而 type 属性指向用于 binding 的端口，在这个例子中是 "glossaryTerms" 端口。
		soap:binding 元素有两个属性 - style 属性和 transport 属性。
			style 属性可取值 "rpc" 或 "document"。在这个例子中我们使用 document。transport 属性定义了要使用的 SOAP 协议。在这个例子中我们使用 HTTP。
		operation 元素定义了每个端口提供的操作符。
			对于每个操作，相应的 SOAP 行为都需要被定义。同时您必须如何对输入和输出进行编码。在这个例子中我们使用了 "literal"。	
完整的 WSDL 语法
	<wsdl:definitions name="nmtoken"? targetNamespace="uri">

    <import namespace="uri" location="uri"/> *
	
    <wsdl:documentation .... /> ?

    <wsdl:types> ?
        <wsdl:documentation .... /> ?
        <xsd:schema .... /> *
    </wsdl:types>

    <wsdl:message name="ncname"> *
        <wsdl:documentation .... /> ?
        <part name="ncname" element="qname"? type="qname"?/> *
    </wsdl:message>

    <wsdl:portType name="ncname"> *
        <wsdl:documentation .... /> ?
        <wsdl:operation name="ncname"> *
            <wsdl:documentation .... /> ?
            <wsdl:input message="qname"> ?
                <wsdl:documentation .... /> ?
            </wsdl:input>
            <wsdl:output message="qname"> ?
                <wsdl:documentation .... /> ?
            </wsdl:output>
            <wsdl:fault name="ncname" message="qname"> *
                <wsdl:documentation .... /> ?
            </wsdl:fault>
        </wsdl:operation>
    </wsdl:portType>

    <wsdl:serviceType name="ncname"> *
        <wsdl:portType name="qname"/> +
    </wsdl:serviceType>

    <wsdl:binding name="ncname" type="qname"> *
        <wsdl:documentation .... /> ?
        <-- binding details --> *
        <wsdl:operation name="ncname"> *
            <wsdl:documentation .... /> ?
            <-- binding details --> *
            <wsdl:input> ?
                <wsdl:documentation .... /> ?
                <-- binding details -->
            </wsdl:input>
            <wsdl:output> ?
                <wsdl:documentation .... /> ?
                <-- binding details --> *
            </wsdl:output>
            <wsdl:fault name="ncname"> *
                <wsdl:documentation .... /> ?
                <-- binding details --> *
            </wsdl:fault>
        </wsdl:operation>
    </wsdl:binding>

    <wsdl:service name="ncname" serviceType="qname"> *
        <wsdl:documentation .... /> ?
        <wsdl:port name="ncname" binding="qname"> *
            <wsdl:documentation .... /> ?
            <-- address details -->
        </wsdl:port>
    </wsdl:service>

</wsdl:definitions>
		
实例2：

<?xml version='1.0' encoding='UTF-8'?>
<wsdl:definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
	xmlns:tns="http://ws.day01_ws.johnny.com/"
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 
	xmlns:ns1="http://schemas.xmlsoap.org/soap/http"
	name="HelloWSImplService" 
	targetNamespace="http://ws.day01_ws.johnny.com/">
	<!-- 
	type元素,定义了交换信息的数据格式。
	 * 为了实现最大的互操作性（interoperability）和平台中立性（neutrality），WSDL选用XML Schema DataTypes
	 * 简称XSD作为标准类型系统，并将它作为固有类型系统。
		
		types 
			schema : 定义了一些标签结构
			数据类型(标签)定义的容器，里面使用schema定义了一些标签结构供message引用
	 -->
	<wsdl:types>
		<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
			xmlns:tns="http://ws.day01_ws.johnny.com/" elementFormDefault="unqualified"
			targetNamespace="http://ws.day01_ws.johnny.com/" version="1.0">
			
			<!-- 
				//用于请求
				<sayHello>
					<arg0>string</arg0>
				</sayHello>
					<q0:sayHello>
						<arg0>BB</arg0> 
					</q0:sayHello>
					
				//用于响应
				<sayHelloResponse>
					<return>string</return>
				</sayHelloResponse>
					<ns2:sayHelloResponse">
						<return>Hello BB</return> 
					</ns2:sayHelloResponse>
			 -->
			
			<xs:element name="sayHello" type="tns:sayHello" />
			<xs:element name="sayHelloResponse" type="tns:sayHelloResponse" />
			<xs:complexType name="sayHello">
				<xs:sequence>
					<xs:element minOccurs="0" name="arg0" type="xs:string" />
				</xs:sequence>
			</xs:complexType>
			<xs:complexType name="sayHelloResponse">
				<xs:sequence>
					<xs:element minOccurs="0" name="return" type="xs:string" />
				</xs:sequence>
			</xs:complexType>
		</xs:schema>
	</wsdl:types>
	
	
	<!-- 
	message元素指定XML 数据类型组成消息的各个部分。message元素用于定义操作的输入和输出参数。
	 * 该部分是信息格式的抽象定义：定义了两个消息sayHelloResponse和sayHelloRequest：
	 * sayHelloRequest：sayHello操作的请求消息格式，由一个消息片断组成，名字为parameters,
	 * 元素是我们前面定义的 types中的元素；
	 * sayHelloResponse：sayHello操作的响应消息格式，由一个消息片断组成，名字为parameters,
	 * 元素是我们前面定义 *的types中的元素；
	 * 如果采用RPC样式的消息传递，只需要将文档中的element元素应以修改为type即可。
		
		message: 用来定义消息的结构   soap消息
			part : 指定引用types中定义的标签片断
	 -->
	
	<wsdl:message name="sayHelloResponse">
		<wsdl:part element="tns:sayHelloResponse" name="parameters">
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="sayHello">
		<wsdl:part element="tns:sayHello" name="parameters">
		</wsdl:part>
	</wsdl:message>
	
	
	<!-- 
	 portType元素中定义了Web服务的操作。操作定义了输入和输出数据流中可以出现的XML消息。
	 * 一些抽象操作的集合。每个操作关联一个输入消息和一个输出消息。
	 * portType定义了服务的调用模式的类型，这里包含一个操作sayHello方法，同时包含input和output表明
	 * 该操作是一个 请求／响应模式，请求消息是前面定义的sayHelloRequest，
	 * 响应消息是前面定义的 sayHelloResponse。input表示传递到Web服务的有效负载，
	 * output消息表示传递给客户的有效负载。
	*  PortType元素定义了Web服务的抽象接口，它可以由一个或者多个operation元素，每个operation元素定义了一个RPC样式或者文档样式的Web服务方法。
	
		portType: 用来定义服务器端的SEI
			operation : 用来指定SEI中的处理请求的方法
				input : 指定客户端应用传过来的数据，　会引用上面的定义的＜message＞
				output :　指定服务器端返回给客户端的数据，　会引用上面的定义的＜message＞
	 -->
	<wsdl:portType name="HelloWS">
		<wsdl:operation name="sayHello">
			<wsdl:input message="tns:sayHello" name="sayHello">
			</wsdl:input>
			<wsdl:output message="tns:sayHelloResponse" name="sayHelloResponse">
			</wsdl:output>
		</wsdl:operation>
	</wsdl:portType>
	
	<!-- 
	binding 元素描述特定服务接口的协议、数据格式、安全性和其它属性。 
	 * 针对操作和portType中使用的消息指定实际的协议和数据格式规范。
	Binding元素将一个抽象的portType映射到一组具体的协议（SOAP或者HTTP）、消息传递样式（RPC或者document）以及编码样式（literal或者SOAP encoding）。
	Binding的类似于将接口或者函数的调用绑定到某种协议上：例如CORBA、COM或者RPC的方式，这里使用SOAP协议。
	
		binding : 用于定义SEI的实现类
			type属性: 引用上面的<portType>
			<soap:binding style="document"> : 绑定的数据是一个document(xml)
			operation : 用来定义实现的方法
				<soap:operation style="document" /> 传输的是document(xml)
				input: 指定客户端应用传过来的数据
					<soap:body use="literal" /> : 文本数据
				output :　指定服务器端返回给客户端的数据
					<soap:body use="literal" /> : 文本数据
	 -->
	
	<wsdl:binding name="HelloWSImplServiceSoapBinding" type="tns:HelloWS">
		<soap:binding style="document"
			transport="http://schemas.xmlsoap.org/soap/http" />
		<wsdl:operation name="sayHello">
			<soap:operation soapAction="" style="document" />
			<wsdl:input name="sayHello">
				<soap:body use="literal" />
			</wsdl:input>
			<wsdl:output name="sayHelloResponse">
				<soap:body use="literal" />
			</wsdl:output>
		</wsdl:operation>
	</wsdl:binding>
	
	<!-- 
	service元素。服务元素包含一组port元素。端口将端点与来自服务接口定义的binding 元素关联起来。
	 port指定一个绑定的地址，这样定义一个通信的终端。
		service : 一个webservice的容器，可以理解为一个工厂类，用来产生binding类的动态代理对象，
			name属性: 它用一指定客户端容器类；通过该名称获取动态代理对象
			port : 用来指定一个服务器端处理请求的入口(就SEI的实现)
				binding属性: 引用上面定义的<binding>
				address : 当前webservice的请求地址
	 -->
	<wsdl:service name="HelloWSImplService">
		<wsdl:port binding="tns:HelloWSImplServiceSoapBinding" name="HelloWSImplPort">
			<soap:address location="http://192.168.10.165:8888/day01_ws/hellows" />
		</wsdl:port>
	</wsdl:service>
</wsdl:definitions>


<definitions>
	<types>
		<schema>
			<element>
	</types>
	<message>
		<part>
	</message>
	<portType>
		<operation>
			<input>
			<output>
	</portType>
	<binding>
		<operation>
			<input>
			<output>
	</binding>
	<service>
		<port>
			<address>
	</service>
</definitions>
