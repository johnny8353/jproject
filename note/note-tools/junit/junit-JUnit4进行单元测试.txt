说明：
	我们在编写大型程序的时候，需要写成千上万个方法或函数，这些函数的功能可能很强大，但我们在程序中只用到该函数的一小部分功能，并且经过调试可以确定，这一小部分功能是正确的。
	但是，我们同时应该确保每一个函数都完全正确，因为如果我们今后如果对程序进行扩展，用到了某个函数的其他功能，而这个功能有bug的话，那绝对是一件非常郁闷的事情。
	所以说，每编写完一个函数之后，都应该对这个函数的方方面面进行测试，这样的测试我们称之为单元测试。
	传统的编程方式，进行单元测试是一件很麻烦的事情，你要重新写另外一个程序，在该程序中调用你需要测试的方法，并且仔细观察运行结果，看看是否有错。
	正因为如此麻烦，所以程序员们编写单元测试的热情不是很高。于是有一个牛人推出了单元测试包，大大简化了进行单元测试所要做的工作，这就是JUnit4。
	本文简要介绍一下在Eclipse3.2中使用JUnit4进行单元测试的方法。
	首先，我们来一个傻瓜式速成教程，不要问为什么，Follow Me，先来体验一下单元测试的快感！
	
步骤：
	1.编写一个Calculator类，这是一个能够简单实现加减乘除、平方、开方的计算器类，然后对这些功能进行单元测试。这个类并不是很完美，我们故意保留了一些Bug用于演示，这些Bug在注释中都有说明。
	2.将JUnit4单元测试包引入这个项目
	3.生成JUnit测试框架：在Eclipse的Package Explorer中用右键点击该类弹出菜单，选择“New à JUnit Test Case”
		系统会自动列出你这个类中包含的方法，选择你要进行测试的方法。此例中，我们仅对“加、减、乘、除”四个方法进行测试。
		之后系统会自动生成一个新类CalculatorTest，里面包含一些空的测试用例。你只需要将这些测试用例稍作修改即可使用。
	4.运行测试代码：按照上述代码修改完毕后，我们在CalculatorTest类上点右键，选择“Run As à JUnit Test”来运行我们的测试
		进度条是红颜色表示发现错误，具体的测试结果在进度条上面有表示“共进行了4个测试，其中1个测试被忽略，一个测试失败”
	
	
	包含必要地Package在测试类中用到了JUnit4框架，自然要把相应地Package包含进来。最主要地一个Package就是org.junit.*。把它包含进来之后，绝大部分功能就有了。
	还有一句话也非常地重要“import static org.junit.Assert.*;”，我们在测试的时候使用的一系列assertEquals方法就来自这个包。
	大家注意一下，这是一个静态包含（static），是JDK5中新增添的一个功能。也就是说，assertEquals是Assert类中的一系列的静态方法，
	一般的使用方式是Assert. assertEquals()，但是使用了静态包含后，前面的类名就可以省略了，使用起来更加的方便。
	
	
Junit4常用的几个annotation介绍：
	-Before:初始化方法（相当于setup）
	-After:释放资源（相当于teardowm）
	-Test:测试方法，在这里可以测试期间异常和超时时间。
	-Ignore:忽略的测试方法。
	-BeforeClass:针对所有测试方法，只执行一次，且必须为static void.
	-AfterClass:针对所有测试方法，只执行一次。
		**每个测试类只能有一个方法被标注为 @BeforeClass 或 @AfterClass ，并且该方法必须是 Public 和 Static 的
		一个Junit4单元测试用例执行顺序为：BeforeClass-Before-@Test-@After-@AfterClass
		每个测试方法的调用顺序为：@Before-@Test-@After.
	-@Test(expected=*.class)在junit4之前，对错误的测试，我们只能通过fail来产生一个错误，并在try里面assertTrue(true)来测试。
		现在，通过@Test元数据中的expected属性。将我们要检验的异常传递给他，这样JUnit框架就能自动帮我们检测是否抛出了我们指定的异常。 divideByZero
	-@Test(timeout=xxx)该元数据传入了一个时间（毫秒）给测试方法，如果测试方法在制定的时间内没运行完，测试也失败。
	-@Ignore 该元数据标记的测试方法在测试中会被忽略。@Ignore("还没实现的方法")。
	
 参数化测试	-	ParameterizedSquareTest
 	你可能遇到过这样的函数，它的参数有许多特殊值，或者说他的参数分为很多个区域。比如，一个对考试分数进行评价的函数，
 	返回值分别为“优秀，良好，一般，及格，不及格”，因此你在编写测试的时候，至少要写 5 个测试，把这 5 中情况都包含了，这确实是一件很麻烦的事情。
 	我们还使用我们先前的例子，测试一下“计算一个数的平方”这个函数，暂且分三类：正数、 0 、负数。
 	为了简化类似的测试， JUnit4 提出了“参数化测试”的概念，只写一个测试函数，把这若干种情况作为参数传递进去，一次性的完成测试。
 	
 打包测试	-	AllTests
 	通过前面的介绍我们可以感觉到，在一个项目中，只写一个测试类是不可能的，我们会写出很多很多个测试类。可是这些测试类必须一个一个的执行，也是比较麻烦的事情。
 	鉴于此， JUnit为我们提供了打包测试的功能，将所有需要运行的测试类集中起来，一次性的运行完毕，大大的方便了我们的测试工作。
 	
JUnit的各种断言
	JUnit为我们提供了一些辅助函数，他们用来帮助我们确定被测试的方法是否按照预期的效果正常工作，通常，把这些辅助函数称为断言。下面我们来介绍一下JUnit的各种断言。 
	1、assertEquals 
		函数原型1：assertEquals([String message],expected,actual) 
		参数说明： 
		
		message是个可选的消息，假如提供，将会在发生错误时报告这个消息。 
		expected是期望值，通常都是用户指定的内容。 
		actual是被测试的代码返回的实际值。 
		
		例：assertEquals("equals","1","1"); 
		
		函数原型2：assertEquals([String message],expected,actual,tolerance) 
		
		参数说明： 
		message是个可选的消息，假如提供，将会在发生错误时报告这个消息。 
		expected是期望值，通常都是用户指定的内容。 
		actual是被测试的代码返回的实际值。 
		tolerance是误差参数，参加比较的两个浮点数在这个误差之内则会被认为是 相等的。 
		例：assertEquals ("yes",5.8,11.0/2.0,0.5); 
	
	2、assertTrue 
		函数原型：assertTrue ([String message],Boolean condition) 
		参数说明： 
		message是个可选的消息，假如提供，将会在发生错误时报告这个消息。 
		condition是待验证的布尔型值。 
		该断言用来验证给定的布尔型值是否为真，假如结果为假，则验证失败。当然，更有验证为假的测试条件： 
		函数原型：assertFalse([String message],Boolean condition) 
		该断言用来验证给定的布尔型值是否为假，假如结果为真，则验证失败。 
		例： assertTrue("true",1==1); 
		assertFalse("false",2==1); 
	
	3、assertNull 
		函数原型：assertNull([String message],Object object) 
		
		参数说明： 
		message是个可选的消息，假如提供，将会在发生错误时报告这个消息。 
		object是待验证的对象。 
		该断言用来验证给定的对象是否为null，假如不为null，则验证失败。相应地，还存在能够验证非null的断言： 
		函数原型：assertNotNull([String message],Object object) 
		
		该断言用来验证给定的对象是否为非null，假如为null，则验证失败。 
		例：assertNull("null",null); 
		    assertNotNull("not null",new String()); 
	
	4、assertSame 
		函数原型：assertSame ([String message], expected,actual) 
		参数说明： 
		message是个可选的消息，假如提供，将会在发生错误时报告这个消息。 
		expected是期望值。 
		actual是被测试的代码返回的实际值。 
		该断言用来验证expected参数和actual参数所引用的是否是同一个对象，假如不是，则验证失败。相应地，也存在验证不是同一个对象的断言： 
		
		函数原型：assertNotSame ([String message], expected,actual) 
		
		该断言用来验证expected参数和actual参数所引用的是否是不同对象，假如所引用的对象相同，则验证失败。 
		
		例：assertSame("same",2,4-2); 
		assertNotSame("not same",2,4-3); 
	
	5、Fail 
		函数原型：Fail([String message]) 
		参数说明： 
		message是个可选的消息，假如提供，将会在发生错误时报告这个消息。 
		该断言会使测试立即失败，通常用在测试不能达到的分支上（如异常）。 
	 	