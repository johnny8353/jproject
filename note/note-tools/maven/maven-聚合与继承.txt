聚合与继承
	一、聚合
　　	如果我们想一次构建多个项目模块，那我们就需要对多个项目模块进行聚合
	Maven约定：
		1、首先聚合模块必须为pom，否则无法构建
		2、必须有<modules>元素，它是实现聚合的最核心配置。这里可以声明多个module元素。每个module的值都是一个当前pom的相对目录。模块所处的目录必须和<module>模块所处的目录一致。
		3、为了方便用户构建项目，通常将聚合模块放在项目目录的最顶层，其他模块则作为聚合模块的子目录存在。
		4、聚合模块的pom没有实质性内容，只有一个pom.xml文件。只是用来帮助其他模块构建的工具。
	二、继承
　　	继承为了消除重复，我们把很多相同的配置提取出来，例如：grouptId，version等
	让项目的jar包版本一致，在项目管理上起了很大的作用。比如说相同的jar包我们每个人都需要依赖一遍，并且每个人引用的版本号不同，势必造成项目混乱，运行出问题。
		继承配置代码
		继承代码中定义属性
		父模块用dependencyManagement进行管理

	三、聚合与继承的关系
	聚合是为了方便快速构建项目，继承是为了消除重复配置，在简化pom的同时还能促进各个模块配置的一致性。共同点是两者的packaging都是pom，聚合模块与继承关系中的父模块除了pom之外都没有实际内容。
	实际项目中我们会发现，一个pom既是聚合pom，也是父pom，这么做主要是为了方便。
	Java成功的重要原因之一就是他能够屏蔽大部分操作系统的差异，XML流行的原因之一是所有语言都接受他。
	Maven用的人越来越多是Maven提倡约定优于配置，这是Maven最核心的设计理念之一。

	四、聚合与继承实战演练
　　	创建四个Maven项目，如下图所示：
		Parent项目是其它三个项目的父项目，主要是用来配置一些公共的配置，其它三个项目再通过继承的方式拥有Parent项目中的配置，首先配置Parent项目的pom.xml，
		添加对项目的Hello、HelloFriend、MakeFriends这三个模块进行聚合以及jar包依赖，pom.xml的配置信息如下：
	Parent项目的pom.xml配置
		<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		    <modelVersion>4.0.0</modelVersion>
		
		    <groupId>me.gacl.maven</groupId>
		    <artifactId>Parent</artifactId>
		    <version>0.0.1-SNAPSHOT</version>
		    <packaging>pom</packaging>
		
		    <name>Parent</name>
		    <url>http://maven.apache.org</url>
		    
		    <!-- 对项目的Hello、HelloFriend、MakeFriends这三个模块进行聚合 -->
		    <modules>
		        <module>../Hello</module>
		        <module>../HelloFriend</module>
		        <module>../MakeFriends</module>
		    </modules>
		    
		    <!-- 定义属性 -->
		    <properties>
		        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		        <junit.version>4.9</junit.version>
		        <maven.version>0.0.1-SNAPSHOT</maven.version>
		    </properties>
		
		    <!-- 用dependencyManagement进行jar包依赖管理 -->
		    <dependencyManagement>
		        <!-- 配置jar包依赖 -->
		        <dependencies>
		            <dependency>
		                <groupId>junit</groupId>
		                <artifactId>junit</artifactId>
		                <!-- 访问junit.version属性 -->
		                <version>${junit.version}</version>
		                <scope>test</scope>
		            </dependency>
		            <dependency>
		                <groupId>me.gacl.maven</groupId>
		                <artifactId>Hello</artifactId>
		                <!-- 访问maven.version属性 -->
		                <version>${maven.version}</version>
		                <scope>compile</scope>
		            </dependency>
		            <dependency>
		                <groupId>me.gacl.maven</groupId>
		                <artifactId>HelloFriend</artifactId>
		                <!-- 访问maven.version属性 -->
		                <version>${maven.version}</version>
		            </dependency>
		        </dependencies>
		    </dependencyManagement>
		</project>	
		
	在Hello项目的pom.xml中继承Parent项目的pom.xml配置
		<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
			xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
			  
			  <modelVersion>4.0.0</modelVersion>
			  <artifactId>Hello</artifactId>
			  
			  <!-- 继承Parent项目中的pom.xml配置 -->
			  <parent>  
			         <groupId>me.gacl.maven</groupId>
			         <artifactId>Parent</artifactId>
			         <version>0.0.1-SNAPSHOT</version>
			         <!-- 使用相对路径 -->
			        <relativePath>../Parent/pom.xml</relativePath>  
			  </parent>
			    
			  <dependencies>
			        <dependency>
			            <groupId>junit</groupId>
			            <artifactId>junit</artifactId>
			        </dependency>
			  </dependencies>
			</project>
			
	以上的四个项目的pom.xml经过这样的配置之后，就完成了在Parent项目中聚合Hello、HelloFriend、MakeFriends这三个子项目(子模块)，而Hello、HelloFriend、MakeFriends
	这三个子项目(子模块)也继承了Parent项目中的公共配置，这样就可以使用Maven一次性构建所有的项目了
	
	选中Parent项目的pom.xml文件→【Run As】→【Maven install】，这样Maven就会一次性同时构建Parent、Hello、HelloFriend、MakeFriends这四个项目