	1>maven 构建cxf webservice 工程报错：
		java.io.EOFException: Unexpected end of ZLIB input stream
	
		可能原因：工程引用的lib不可用，验证方法，打开webroot下WEB-INF/lib目录，右击验证压缩文件，查看是否有错误jar包。
		解决：如果有发现有问题的jar包，删除重新下载，并确保jar没有问题。
		
	2>maven 构建报错：
		报错1：java.lang.ClassNotFoundException: org.apache.cxf.transport.http_jetty.spring.JettyHTTPServerEngineBeanDefinitionParser.SpringJettyHTTPServerEngine
		可能原因：直接ctrl+shift+T	找到报错的类，如果源码下载完不能正常显示，应该是jar包有问题。
		解决：删除重新下载jar包，并确保jar没有问题。
		
		报错2：[ERROR] Failed to execute goal on project webservice-cxf-demo: Could not resolve dependencies for project 
		com.johnny:webservice-cxf-demo:jar:2.3.4: Failed to collect dependencies at com.johnny:jetty-demo:jar:2.3.4: 
		Failed to read artifact descriptor for com.johnny:jetty-demo:jar:2.3.4: Failure to find com.johnny:j2ee:pom:2.3.4 
		in https://repo.maven.apache.org/maven2 was cached in the local repository, resolution will not be reattempted until
		 the update interval of central has elapsed or updates are forced -> [Help 1]
		 
		 Downloading: https://repo.maven.apache.org/maven2/com/johnny/j2ee/2.3.4/j2ee-2.3.4.pom
		解决：把父也进行install，在本地找得到就不会到中心库去找
		

	1>	maven编译报错
	https\://repo.maven.apache.org/maven2/.error=Could not transfer artifact org.apache.maven.plugins\:maven-resources-plugin\:pom\:
	2.6 from/to central (https\://repo.maven.apache.org/maven2)\: Connect to repo.maven.apache.org\:443 
	[repo.maven.apache.org/151.101.40.215] failed\: Connection timed out\: connect
		网络问题
		 
	2>使用Eclipse自带的Maven插件创建Web项目时报错：
		Could not resolve archetype org.apache.maven.archetypes:maven-archetype-webapp:RELEASE 
		from any of the configured repositories.
	解决方案：
		在Eclipse Maven配置中添加新的Catalog配置： Preferences - Maven - Archetypes
		http://repo1.maven.org/maven2/archetype-catalog.xml
		也可以下载到本地，然后再添加，这样比较快，eclipse联网比较慢
		使用刚添加的catalog创建web工程
		
	3>-Dmaven.multiModuleProjectDirectory system property is not set. Check $M2_HOME environment variable and mvn script match.
	然后在Window->Preference->Java->Installed JREs->Edit
		在Default VM arguments中设置
		-Dmaven.multiModuleProjectDirectory=D:\apache-maven-3.3.9
		
	4>No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal> or <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clean, pre-site, site, post-site, site-deploy. -> [Help 1]
		pom.xml文件<build>标签后面加上<defaultGoal>compile</defaultGoal>即可  
		  <build>
		    <finalName>struts2</finalName>
		  	<defaultGoal>compile</defaultGoal>
		  </build>


	5>Maven里面的Jar包经常出现Missing的情况，无外乎几种情况：
		1、私服里面没有相应的版本号的Jar包或者Jar包没写版本号
		2、Jar包引错了，相应的依赖关系也就错了
		3、引入了依赖的Jar包，没被管理起来
		
	6>debug遇到Source not found.
		第一：debug窗口，右击Edit Source Lookup，Add-Java Source-选择对应的项目
		第二：另外如果是多项目勾选Resolve workspace atifacts。在启动jetty的Main配置里
		
	
	7>maven install 报错: src/main/java/struts2/HelloServlet.java:[13,5] 编码GBK的不可映射字符
		解决这个问题的思路： 在maven的编译插件中声明正确的字符集编码编码——编译使用的字符集编码与代码文件使用的字符集编码一致！！
		安装系统之后，一般中文系统默认字符集是GBK。我们安装的软件一般都继承使用操作系统的默认字符集。所以当在中文XP或者win7系统开发，在使用maven（mvn compile）编译项目的时候，
		就会出现“编码 gbk 的不可映射字符”： 这个是由于代码使用的UTF-8，而maven编译的时候使用的GBK的缘故。 
		可以通过修改项目的pom文件，可以告诉maven这个项目使用UTF-8编码来编译。在项目的pom.xml文件中添加下面的配置：
			<!-- 指明编译源代码时使用的字符编码，maven编译的时候默认使用的GBK编码， 通过project.build.sourceEncoding属性设置字符编码，告诉maven这个项目使用UTF-8来编译 -->
	     	<properties>
	       	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	    	</properties>
	　　	或者在pom.xml的/project/build/plugins/下的编译插件声明 中加入下面的配置：
			<encoding>utf8</encoding>
	
		<plugin>
		    <artifactId>maven-compiler-plugin</artifactId>
		    <configuration>
		        <source>1.6</source>
		        <target>1.6</target>
		        <!-- 指明编译源代码时使用的字符编码，  maven编译的时候默认使用的GBK编码，通过encoding属性设置字符编码，告诉maven这个项目使用UTF-8来编译 -->
		        <encoding>utf8</encoding> 
		    </configuration>
		</plugin>
		
	8>MAVEN Maven编译错误:不兼容的类型的解决方案
		泛型在实际的工作中应用非常广泛，关于泛型就不在这里赘述了，感兴趣请戳《重新认识泛型》。项目中用到了如下的泛型：
	    public <T> T query(String sql, ResultSetHandler<T> rsh) throws SQLException {
	        return this.query(sql, rsh, (Object[]) null);
	    }
		以上代码在Eclipse中可以编译通过并成功运行，但是当你使用Maven编译的时候就会报错，错误信息如下：
		
		xxx不兼容的类型
		需要:xxx
		找到:    java.lang.Object
		
		Eclipse编译代码时，使用的是自带的JDT（Java Development Tools），而Maven默认使用的是JAVA_HONE中的javac，而javac相对JDT的检查机制来说，
		更加的严格，所以导致Eclipse可以编译通过，而用Maven编译会报错的结果。
		
		解决方案有两个：
			第一个，借助Eclipse的JDT编译
				点击 Eclipse –> Project –> Clean…  使用JDT将源代码编译到target文件夹下，然后直接使用mvn package 打包即可(不要加clean)。
			第二个，在pom.xml文件中为Maven指定用JDT来编译（推荐）
				修改pom.xml文件中maven-compiler-plugin的配置：
				<build>
				        ...
				    <plugins>
				            ...
				        <plugin>
				            <groupId>org.apache.maven.plugins</groupId>
				            <artifactId>maven-compiler-plugin</artifactId>
				            <version>3.1</version>
				            <configuration>
				                <source>${java.version}</source>
				                <target>${java.version}</target>
				                *<compilerId>eclipse</compilerId>
				            </configuration>
				            <dependencies>
				                <dependency>
				                    <groupId>org.codehaus.plexus</groupId>
				                    <artifactId>plexus-compiler-eclipse</artifactId>
				                    <version>2.2</version>
				                </dependency>
				            </dependencies>
				        </plugin>
				        ....
				    </plugins>
				    ...
				</build>
		保存，用Maven编译，顺利通过，你又看到了熟悉的提示信息：