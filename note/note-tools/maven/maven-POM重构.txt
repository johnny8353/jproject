重构是广大开发者再熟悉不过的技术，在Martin Fowler的《重构——改善既有代码的设计》一书中，
其定义为“重构(名词):对软件内部结构的一种调整,目的是在不改变软件之可察行为前提下,提高其可理解性,降低其修改成本.”
以及“重构(动词):使用一系列重构准则(手法),在不改变软件之可察行为前提下,调整其结构.”。
重构能够改善软件设计，使代码更易读，更容易找出bug，并帮助你更快速地编码。较之于一般的代码来说，Maven的POM简单很多，不过随着项目的成长，模块的增多，POM的内容也会变多，
这个时候，我们可以对POM进行重构，在保持构建成功的前提下，简化POM内容，使其更简洁易懂。

前提
	大家都知道，如果没有单元测试为前提，对代码进行重构是非常危险的。同样，在重构POM之前，项目应该有足够的自动化测试保证POM重构不会破坏构建。
	例如，重构POM的时候可能会删除或添加依赖，造成依赖版本变化，依赖范围变化，插件版本变化等等，这些变化可能会导致项目编译失败，或者测试失败。
	在自动化测试及构建的基础上，最好能够有持续集成环境，以保证POM的修改可能造成的问题能够及时的被发现和修复。
	笔者目前工作的项目有一个对应的持续集成任务，该任务基于Hudson，每10分钟检查一次SCM，如果发现变更则构建项目，并反馈结果。这样，我就不用担心自己修改POM会引入潜在的问题。
	
增还是删
	有时候这个答案是很显然的，当你的POM中存在一些依赖或者插件配置，但实际代码没有用到这些配置的时候，应该尽早删掉它们以免给人带来困惑。

	还有一种常见的情况，我们可以删掉一些POM的元素，例如POM中配置了继承，当前模块与父模块使用同样的groupId和version时，就可以将<groupId>和<version>元素删除，
	因为它们可以从父模块继承而来，重复配置没有什么意义。
	
	还一些重要的POM内容通常被大多数项目所忽略，这些内容不会影响项目的构建，但能方便信息的沟通，它们包括项目URL，开发者信息，SCM信息，持续集成服务器信息等等，
	这些信息对于开源项目来说尤其重要。对于那些想了解项目的人来说，这些信息能他们帮助找到想要的信息，基于这些信息生成的Maven站点也更有价值。相关的POM配置很简单，如：

	<project>
	  <description>...</description>
	  <url>...</url>
	  <licenses>...</licenses>
	  <organization>...</organization>
	  <developers>...</developers>
	  <issueManagement>...</issueManagement>
	  <ciManagement>...</ciManagement>
	  <mailingLists>...</mailingLists>
	  <scm>...</scm>
	</project>
	
无论是对POM内容进行增还是删，其目的都是一样的，就是为了让POM更清晰易懂且让构建更稳定。从这点来说，POM重构与一般的代码重构是类似的。需要谨记的是，重构的前提是完善的自动化测试和持续集成。

实际的Maven项目基本都是多模块的，如果仅仅重构单个POM而不考虑模块之间的关系，那就会造成无谓的重复。

重复，还是重复
	程序员应该有狗一般的嗅觉，要能嗅到重复这一最常见的坏味道，不管重复披着怎样的外衣，一旦发现，都应该毫不留情地彻底地将其干掉。不要因为POM不是产品代码而纵容重复在这里发酵，例如这样一段代码就有重复：
	你会在一个项目中使用不同版本的SpringFramework组件么？答案显然是不会。因此这里就没必要重复写三次<version>2.5</version>，使用Maven属性将2.5提取出来如下：
		<properties>
		  <spring.version>2.5</spring.version>
		</properties>
		<depencencies>
		  <dependency>
		    <groupId>org.springframework</groupId>
		    <artifactid>spring-beans</artifactId>
		    <version>${spring.version}</version>
		  </dependency>
		  <dependency>
		    <groupId>org.springframework</groupId>
		    <artifactid>spring-context</artifactId>
		    <version>${spring.version}</version>
		  </dependency>
		  <dependency>
		    <groupId>org.springframework</groupId>
		    <artifactid>spring-core</artifactId>
		    <version>${spring.version}</version>
		  </dependency>
		</depencencies>
		
	现在2.5只出现在一个地方，虽然代码稍微长了点，但重复消失了，日后升级依赖版本的时候，只需要修改一处，而且也能避免漏掉升级某个依赖。

	多模块POM重构的目的和该例一样，也是为了消除重复，模块越多，潜在的重复就越多，重构就越有必要。

消除多模块依赖配置重复
	考虑这样一个不大不小的项目，它有10多个Maven模块，这些模块分工明确，各司其职，相互之间耦合度比较小，这样大家就能够专注在自己的模块中进行开发而不用过多考虑他人对自己的影响。
	（好吧，我承认这是比较理想的情况）那我开始对模块A进行编码了，首先就需要引入一些常见的依赖如JUnit、Log4j等等：
	
	对的，他漏了JUnit依赖的scope，那是因为他不熟悉Maven。还有什么问题？对，版本！虽然他和我一样都依赖了JUnit及Log4j，但版本不一致啊。
	我们开会讨论没有细化到具体用什么版本，但如果一个项目同时依赖某个类库的多个版本，那是十分危险的！OK，现在只是两个模块的两个依赖，手动修复一下没什么问题，
	但如果是10个模块，每个模块10个依赖或者更多呢？看来这真是一个泥潭，一旦陷进去就难以收拾了。
	
	Maven提供了优雅的解决办法，使用继承机制以及dependencyManagement元素就能解决这个问题。注意，是dependencyMananget而非dependencies。
	也许你已经想到在父模块中配置dependencies，那样所有子模块都自动继承，不仅达到了依赖一致的目的，还省掉了大段代码，但这么做是有问题的，
	例如你将模块C的依赖spring-aop提取到了父模块中，但模块A和B虽然不需要spring-aop，但也直接继承了。dependencyManagement就没有这样的问题，
	dependencyManagement只会影响现有依赖的配置，但不会引入依赖。
	
	现在只需要groupId和artifactId，其它元素如version和scope都能通过继承父POM的dependencyManagement得到，如果有依赖配置了exclusions，那节省的代码就更加可观。
	但重点不在这，重点在于现在能够保证所有模块使用的JUnit和Log4j依赖配置是一致的。
	
单集成的问题	
	我们知道Maven的继承和Java的继承一样，是无法实现多重继承的，如果10个、20个甚至更多模块继承自同一个模块，那么按照我们之前的做法，这个父模块的dependencyManagement会包含大量的依赖。
	如果你想把这些依赖分类以更清晰的管理，那就不可能了，import scope依赖能解决这个问题。你可以把dependencyManagement放到单独的专门用来管理依赖的POM中，
	然后在需要使用依赖的模块中通过import scope依赖，就可以引入dependencyManagement。例如可以写这样一个用于依赖管理的POM：	
	
	<dependencyManagement>
	    <dependencies>
	        <dependency>
	          <groupId>com.juvenxu.sample</groupId>
	          <artifactid>sample-dependency-infrastructure</artifactId>
	          <version>1.0-SNAPSHOT</version>
	          <type>pom</type>
	          <scope>import</scope>
	        </dependency>
	    </dependencies>
  	</dependencyManagement>
  	父模块的POM就会非常干净，由专门的packaging为pom的POM来管理依赖，也契合的面向对象设计中的单一职责原则。此外，我们还能够创建多个这样的依赖管理POM，以更细化的方式管理依赖。
  	这种做法与面向对象设计中使用组合而非继承也有点相似的味道。