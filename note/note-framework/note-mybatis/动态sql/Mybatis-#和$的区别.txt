mybatis中的#和$的区别?
	 1. #将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。如：order by #user_id#，如果传入的值是111,那么解析成sql时的值为order by "111", 如果传入的值是id，
	 则解析成的sql为order by "id". 　　
	 2. $将传入的数据直接显示生成在sql中。如：order by $user_id$，如果传入的值是111,那么解析成sql时的值为order by 111, 如果传入的值是id，则解析成的sql为order by id. 　　 
	 3. #方式能够很大程度防止sql注入。 　　
	 4.$方式无法防止Sql注入。 
	 5.$方式一般用于传入数据库对象，例如传入表名. 　　 
	 6.一般能用#的就别用$. MyBatis排序时使用order by 动态参数时需要注意，用$而不是# 字符串替换 默认情况下，使用#{}格式的语法会导致MyBatis创建预处理语句属性并以它为背景设置安全的值
	 （比如?）。这样做很安全，很迅速也是首选做法，有时你只是想直接在SQL语句中插入一个不改变的字符串。比如，像ORDER BY，你可以这样来使用： ORDER BY ${columnName} 
	 这里MyBatis不会修改或转义字符串。 重要：接受从用户输出的内容并提供给语句中不变的字符串，这样做是不安全的。这会导致潜在的SQL注入攻击，因此你不应该允许用户输入这些字段，或者通常自行转义并检查
	
	
	MyBatis中使用parameterType向SQL语句传参，parameterType后的类型可以是基本类型int,String,HashMap和java自定义类型。
	
	MyBatis mapper文件中的变量引用方式#{}与${}的差别
		默认情况下,使用#{}语法,MyBatis会产生PreparedStatement语句中，并且安全的设置PreparedStatement参数，这个过程中MyBatis会进行必要的安全检查和转义。
		示例1：
		执行SQL：Select * from emp where name = #{employeeName}
		参数：employeeName=>Smith
		解析后执行的SQL：Select * from emp where name = ？
		执行SQL：Select * from emp where name = ${employeeName}
		参数：employeeName传入值为：Smith
		解析后执行的SQL：Select * from emp where name =Smith
	
	
	综上所述、${}方式会引发SQL注入的问题、同时也会影响SQL语句的预编译，所以从安全性和性能的角度出发，能使用#{}的情况下就不要使用${}
	
	但是${}在什么情况下使用呢？
		有时候可能需要直接插入一个不做任何修改的字符串到SQL语句中。这时候应该使用${}语法。
		比如，动态SQL中的字段名，如：ORDER BY ${columnName}
		注意：当使用${}参数作为字段名或表名时、需指定statementType为“STATEMENT”，如：
		<select id="queryMetaList" resultType="Map" statementType="STATEMENT">
			Select * from emp where name = ${employeeName} ORDER BY ${columnName}
		</select>   
