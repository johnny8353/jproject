视图和视图解析器
• 请求处理方法执行完成后，最终返回一个 ModelAndView对象。对于那些返回 String，View 或 ModeMap 等类型的处理方法，Spring MVC 也会在内部将它们装配成一个ModelAndView 对象，它包含了逻辑名和模型对象的视图
• Spring MVC 借助视图解析器（ViewResolver）得到最终的视图对象（View），最终的视图可以是 JSP ，也可能是Excel、JFreeChart 等各种表现形式的视图
• 对于最终究竟采取何种视图对象对模型数据进行渲染，处理器并不关心，处理器工作重点聚焦在生产模型数据的工作上，从而实现 MVC 的充分解耦
视图
	视图的作用是渲染模型数据，将模型里的数据以某种形式呈现给客户。
	• 为了实现视图模型和具体实现技术的解耦，Spring 在org.springframework.web.servlet 包中定义了一个高度抽象的 View接口：
	• 视图对象由视图解析器负责实例化。由于视图是无状态的，所以他们不会有线程安全的问题


视图解析器
	• SpringMVC 为逻辑视图名的解析提供了不同的策略，可以在 Spring WEB 上下文中配置一种或多种解析策略，并
	指定他们之间的先后顺序。每一种映射策略对应一个具体的视图解析器实现类。
	• 视图解析器的作用比较单一：将逻辑视图解析为一个具体的视图对象。
	常用的视图解析器实现类
		• 程序员可以选择一种视图解析器或混用多种视图解析器
		• 每个视图解析器都实现了 Ordered 接口并开放出一个 order 属性，可以通过 order 属性指定解析器的优先顺序，order 越小优先级越高。
		• SpringMVC 会按视图解析器顺序的优先顺序对逻辑视图名进行解析，直到解析成功并返回视图对象，否则将抛出 ServletException 异常
		
	InternalResourceViewResolver
		JSP 是最常见的视图技术，可以使用InternalResourceViewResolver 作为视图解析器：
			<!-- 配置视图解析器: 如何把 handler 方法返回值解析为实际的物理视图 -->
			<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
				<property name="prefix" value="/WEB-INF/views/"></property>
				<property name="suffix" value=".jsp"></property>
			</bean>
			
	JstlView
		• 若项目中使用了 JSTL，则 SpringMVC 会自动把视图由InternalResourceView 转为 JstlView
		• 若使用 JSTL 的 fmt 标签则需要在 SpringMVC 的配置文件中配置国际化资源文件
		• 若希望直接响应通过 SpringMVC 渲染的页面，可以使用 mvc:viewcontroller 标签实现
			示例 国际化
			@RequestMapping("/testViewAndViewResolver")
			public String testViewAndViewResolver(){
				System.out.println("testViewAndViewResolver");
				return SUCCESS;
			}
			
			<a href="springmvc/testViewAndViewResolver">Test ViewAndViewResolver</a>
			<br><br>
			Jstl jar包加入lib下：
			jstl.jar	standard.jar
			
			success.jsp:
			<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
			
			<fmt:message key="i18n.username"></fmt:message>
			<br><br>
			
			<fmt:message key="i18n.password"></fmt:message>
			<br><br>
			
			dispatcherServlet-servlet.xml：
			<!-- 配置自定扫描的包 -->
			<context:component-scan base-package="com.johnny.springmvc"></context:component-scan>
				
			<!-- 配置视图解析器: 如何把 handler 方法返回值解析为实际的物理视图，InternalResourceViewResolver的Order值为Int Max -->
			<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
				<property name="prefix" value="/WEB-INF/views/"></property>
				<property name="suffix" value=".jsp"></property>
			</bean>
			
			<!-- 配置国际化资源文件 -->
			<bean id="messageSource"
				class="org.springframework.context.support.ResourceBundleMessageSource">
				<property name="basename" value="i18n"></property>	
			</bean>
			示例 mvc:viewcontroller
			<!-- 配置直接转发的页面 -->
			<!-- 可以直接相应转发的页面, 而无需再经过 Handler 的方法.  -->
			<!-- 加上后原有的方式不可用，需要加上下面的 mvc:annotation-driven -->
			<mvc:view-controller path="/success" view-name="success"/>
			
			<!-- 在实际开发中通常都需配置 mvc:annotation-driven 标签  -->
			<mvc:annotation-driven></mvc:annotation-driven>

	自定义视图-BeanNameViewResolver

		dispatcherServlet-servlet.xml：
		<!-- 配置视图解析器: 如何把 handler 方法返回值解析为实际的物理视图 -->
		<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="prefix" value="/WEB-INF/views/"></property>
			<property name="suffix" value=".jsp"></property>
		</bean>
		
		<!-- 配置视图  BeanNameViewResolver 解析器: 使用视图的名字来解析视图 -->
		<!-- 通过 order 属性来定义视图解析器的优先级, order 值越小优先级越高 -->
		<!-- InternalResourceViewResolver的 order 为Int.MaxValue 意思 其他的解析器解析不了就由该解析器解析-->
		<!-- SpringMVC 会按视图解析器顺序的优先顺序对逻辑视图名进行解析，直到解析成功并返回视图对象，否则将抛出 ServletException 异常 -->
		<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
			<property name="order" value="100"></property>
		</bean>
		
		新建类：HelloView
		package com.johnny.springmvc.views;
		
		import java.util.Date;
		import java.util.Map;
		
		import javax.servlet.http.HttpServletRequest;
		import javax.servlet.http.HttpServletResponse;
		
		import org.springframework.stereotype.Component;
		import org.springframework.web.servlet.View;
		
		@Component
		public class HelloView implements View{
		
			@Override
			public String getContentType() {
				return "text/html";
			}
		
			@Override
			public void render(Map<String, ?> model, HttpServletRequest request,
					HttpServletResponse response) throws Exception {
				response.getWriter().print("hello view, time: " + new Date());
			}
		
		}
		
		@RequestMapping("/testView")
		public String testView(){
			System.out.println("testView");
			return "helloView";
		}
		
		<a href="springmvc/testView">Test View</a>
		<br><br>
	Excel 视图
		• 若希望使用 Excel 展示数据列表，仅需要扩展SpringMVC 提供的 AbstractExcelView 或AbstractJExcel View 即可。实现 buildExcelDocument()方法，在方法中使用模型数据对象构建 Excel 文档就可以了。
		• AbstractExcelView 基于 POI API，而AbstractJExcelView 是基于 JExcelAPI 的。
		• 视图对象需要配置 IOC 容器中的一个 Bean，使用BeanNameViewResolver 作为视图解析器即可
		• 若希望直接在浏览器中直接下载 Excel 文档，则可以设置响应头 Content-Disposition 的值为attachment;filename=xxx.xls
	重定向
		• 一般情况下，控制器方法返回字符串类型的值会被当成逻辑视图名处理
		• 如果返回的字符串中带 forward: 或 redirect: 前缀时，SpringMVC 会对他们进行特殊处理：将 forward: 和redirect: 当成指示符，其后的字符串作为 URL 来处理
			– redirect:success.jsp：会完成一个到 success.jsp 的重定向的操作
			– forward:success.jsp：会完成一个到 success.jsp 的转发操作
			示例
			以上-这里：springmvc-1：
			@RequestMapping("/testRedirect")
			public String testRedirect(){
				System.out.println("testRedirect");
				return "redirect:/index.jsp";
			}
					
				
						