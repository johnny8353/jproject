SpringMVC 概述
	• Spring 为展现层提供的基于 MVC 设计理念的优秀的Web 框架，是目前最主流的 MVC 框架之一
	• Spring3.0 后全面超越 Struts2，成为最优秀的 MVC 框架
	• Spring MVC 通过一套 MVC 注解，让 POJO 成为处理请求的控制器，而无须实现任何接口。
	• 支持 REST 风格的 URL 请求
	• 采用了松散耦合可插拔组件结构，比其他 MVC 框架更具扩展性和灵活性
	
SpringMVC 对比 Struts2
	• ①. Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter
	• ②. Spring MVC 会稍微比 Struts2 快些. Spring MVC 是基于方法设计, 而 Sturts2 是基于类, 每次发一次请求都会实例一个 Action.
	• ③. Spring MVC 使用更加简洁, 开发效率Spring MVC确实比 struts2 高: 支持 JSR303, 处理 ajax 的请求更方便
	• ④. Struts2 的 OGNL 表达式使页面的开发效率相比Spring MVC 更高些.

SpringMVC的HelloWorld
	步骤：
		– 加入 jar 包
		– commons-logging-1.1.3.jar
		– spring-aop-4.0.0.RELEASE.jar
		– spring-beans-4.0.0.RELEASE.jar
		– spring-context-4.0.0.RELEASE.jar
		– spring-core-4.0.0.RELEASE.jar
		– spring-expression-4.0.0.RELEASE.ja
		– spring-web-4.0.0.RELEASE.jar
		– spring-webmvc-4.0.0.RELEASE.jar
		– 在 web.xml 中配置 DispatcherServlet
	配置 DispatcherServlet ：DispatcherServlet 默认加载 /WEBINF/<servletName-servlet>.xml 的 Spring 配置文件, 启动 WEB 层的 Spring 容器。可以通过 contextConfigLocation 初始化参数自定义配置文件的位置和名称
	
	<!-- 配置 DispatcherServlet -->
		<servlet>
			<servlet-name>dispatcherServlet</servlet-name>
			<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
			<!-- 配置 DispatcherServlet 的一个初始化参数: 配置 SpringMVC 配置文件的位置和名称 -->
			<!-- 
				实际上也可以不通过 contextConfigLocation 来配置 SpringMVC 的配置文件, 而使用默认的.
				默认的配置文件为: /WEB-INF/<servlet-name>-servlet.xml
			-->
			<!--  
			<init-param>
				<param-name>contextConfigLocation</param-name>
				<param-value>classpath:springmvc.xml</param-value>
			</init-param>
			-->
			<load-on-startup>1</load-on-startup>
		</servlet>
	
		<servlet-mapping>
			<servlet-name>dispatcherServlet</servlet-name>
			<url-pattern>/</url-pattern>
		</servlet-mapping>
	– 加入 Spring MVC 的配置文件
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	
		<!-- 配置自定扫描的包 -->
		<context:component-scan base-package="com.johnny.springmvc"></context:component-scan>
		<!-- 配置视图解析器: 如何把 handler 方法返回值解析为实际的物理视图 -->
		<bean
			class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="prefix" value="/WEB-INF/views/"></property>
			<property name="suffix" value=".jsp"></property>
		</bean>
	</beans>
	– 编写处理请求的处理器，并标识为处理器
	/**
	 * 1. 使用 @RequestMapping 注解来映射请求的 URL
	 * 2. 返回值会通过视图解析器解析为实际的物理视图, 对于 InternalResourceViewResolver 视图解析器, 会做如下的解析:
	 * 通过 prefix + returnVal + 后缀 这样的方式得到实际的物理视图, 然会做转发操作
	 * 
	 * /WEB-INF/views/success.jsp
	 * 
	 * @return
	 */
	@RequestMapping("/helloworld")
	public String hello(){
		System.out.println("hello world");
		return "success";
	}
