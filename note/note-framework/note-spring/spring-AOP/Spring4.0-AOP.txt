动态代理
	代理设计模式的原理: 使用一个代理将对象包装起来, 然后用该代理对象取代原始对象. 任何对原始对象的调用都要通过代理. 代理对象决定是否以及何时将方法调用转到原始对象上.
	
AOP 简介
	-AOP(Aspect-Oriented Programming, 面向切面编程): 是一种新的方法论, 是对传统 OOP(Object-Oriented Programming, 面向对象编程) 的补充.
	-AOP 的主要编程对象是切面(aspect), 而切面模块化横切关注点.
	-在应用 AOP 编程时, 仍然需要定义公共功能, 但可以明确的定义这个功能在哪里, 以什么方式应用, 并且不必修改受影响的类. 这样一来横切关注点就被模块化到特殊的对象(切面)里.
	-AOP 的好处:
		每个事物逻辑位于一个位置, 代码不分散, 便于维护和升级
		业务模块更简洁, 只包含核心业务代码.

AOP 术语
	-切面(Aspect):  横切关注点(跨越应用程序多个模块的功能)被模块化的特殊对象
	-通知(Advice):  切面必须要完成的工作
	-目标(Target): 被通知的对象
	-代理(Proxy): 向目标对象应用通知之后创建的对象
	-连接点（Joinpoint）：程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后等。连接点由两个信息确定：方法表示的程序执行点；相对点表示的方位。
	例如 ArithmethicCalculator#add() 方法执行前的连接点，执行点为 ArithmethicCalculator#add()； 方位为该方法执行前的位置
	-切点（pointcut）：每个类都拥有多个连接点：例如 ArithmethicCalculator 的所有方法实际上都是连接点，即连接点是程序类中客观存在的事务。
	AOP 通过切点定位到特定的连接点。类比：连接点相当于数据库中的记录，切点相当于查询条件。切点和连接点不是一对一的关系，一个切点匹配多个连接点，
	切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。
	
Spring  AOP
	AspectJ：Java 社区里最完整最流行的 AOP 框架.
	在 Spring2.0 以上版本中, 可以使用基于 AspectJ 注解或基于 XML 配置的 AOP
	
	要在 Spring 中声明 AspectJ 切面, 只需要在 IOC 容器中将切面声明为 Bean 实例. 当在 Spring IOC 容器中初始化 AspectJ 切面之后, Spring IOC 容器就会为那些与 AspectJ 切面相匹配的 Bean 创建代理.
	在 AspectJ 注解中, 切面只是一个带有 @Aspect 注解的 Java 类. 
	通知是标注有某种注解的简单的 Java 方法.
	AspectJ 支持 5 种类型的通知注解: 	- /spring/N103_Spring/com/johnny/spring/aop/impl/LoggingAspect.java
		@Before: 前置通知, 在方法执行之前执行
		@After: 后置通知, 在方法执行之后执行 
			后置通知是在连接点完成之后执行的, 即连接点返回结果或者抛出异常的时候
			一个切面可以包括一个或者多个通知.
		@AfterRunning: 返回通知, 在方法返回结果之后执行
			无论连接点是正常返回还是抛出异常, 后置通知都会执行. 如果只想在连接点返回的时候记录日志, 应使用返回通知代替后置通知.
			在返回通知中, 只要将 returning 属性添加到 @AfterReturning 注解中, 就可以访问连接点的返回值. 该属性的值即为用来传入返回值的参数名称. 
			必须在通知方法的签名中添加一个同名参数. 在运行时, Spring AOP 会通过这个参数传递返回值.
			原始的切点表达式需要出现在 pointcut 属性中
		@AfterThrowing: 异常通知, 在方法抛出异常之后
			只在连接点抛出异常时才执行异常通知
			将 throwing 属性添加到 @AfterThrowing 注解中, 也可以访问连接点抛出的异常. Throwable 是所有错误和异常类的超类. 所以在异常通知方法可以捕获到任何错误和异常.
			如果只对某种特殊的异常类型感兴趣, 可以将参数声明为其他异常的参数类型. 然后通知就只在抛出这个类型及其子类的异常时才被执行.
		
		@Around: 环绕通知, 围绕着方法执行
			-环绕通知是所有通知类型中功能最为强大的, 能够全面地控制连接点. 甚至可以控制是否执行连接点.
			-对于环绕通知来说, 连接点的参数类型必须是 ProceedingJoinPoint . 它是 JoinPoint 的子接口, 允许控制何时执行, 是否执行连接点.
			-在环绕通知中需要明确调用 ProceedingJoinPoint 的 proceed() 方法来执行被代理的方法. 如果忘记这样做就会导致通知被执行了, 但目标方法没有被执行.
			-注意: 环绕通知的方法需要返回目标方法执行之后的结果, 即调用 joinPoint.proceed(); 的返回值, 否则会出现空指针异常
					
	利用方法签名编写 AspectJ 切入点表达式
		最典型的切入点表达式时根据方法的签名来匹配各种方法:
		-execution * com.johnny.spring.ArithmeticCalculator.*(..): 匹配 ArithmeticCalculator 中声明的所有方法,第一个 * 代表任意修饰符及任意返回值.
		 第二个 * 代表任意方法. .. 匹配任意数量的参数. 若目标类与接口与该切面在同一个包中, 可以省略包名.
		-execution public * ArithmeticCalculator.*(..): 匹配 ArithmeticCalculator 接口的所有公有方法.
		-execution public double ArithmeticCalculator.*(..): 匹配 ArithmeticCalculator 中返回 double 类型数值的方法
		-execution public double ArithmeticCalculator.*(double, ..): 匹配第一个参数为 double 类型的方法, .. 匹配任意数量任意类型的参数
		-execution public double ArithmeticCalculator.*(double, double): 匹配参数类型为 double, double 类型的方法.
		在 AspectJ 中, 切入点表达式可以通过操作符 &&, ||, ! 结合起来. 
			@Pointcut("execution(* *.add(int,..))||execution(* *.add(int,..))")
			public void loggingOperation(){}
			
			@Before("loggingOperation")
			public void logBefore(JoinPoint joinPoint){
				log.info("The method" +joinPoint.getSinature().getName()+"() begins with"+Arrays.toString(joinPoint.getArgs()));
			}
			
		*Before("execution(* *.*(..))")
		标识这个方法是个前置通知,  切点表达式表示执行任意类的任意方法. 第一个 * 代表匹配任意修饰符及任意返回值,  第二个 * 代表任意类的对象,第三个 * 代表任意方法, 
		参数列表中的 ..  匹配任意数量的参数
		
	
	在 Spring 中启用 AspectJ 注解支持
		1)加入jar包
		aop:
			AspectJ 类库: aopalliance.jar、aspectj.weaver.jar 和 spring-aspects.jar
			spring-aop-4.0.0.RELEASE.jar
			spring-aspects-4.0.0.RELEASE.jar
			com.springsource.org.aopalliance-1.0.0.jar
			com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar
		spring:
			commons-logging-1.1.1.jar
			spring-beans-4.0.0.RELEASE.jar
			spring-context-4.0.0.RELEASE.jar
			spring-core-4.0.0.RELEASE.jar
			spring-expression-4.0.0.RELEASE.jar
		2)在配置文件中加入aop的命名空间，将 aop Schema 添加到 <beans> 根元素中.
		3）基于注解的方式
			①在配置文件中加入如下配置
			要在 Spring IOC 容器中启用 AspectJ 注解支持, 只要在 Bean 配置文件中定义一个空的 XML 元素 <aop:aspectj-autoproxy>
			当 Spring IOC 容器侦测到 Bean 配置文件中的 <aop:aspectj-autoproxy> 元素时, 会自动为与 AspectJ 切面匹配的 Bean 创建代理.
			②把横切关注点的代码抽象到切面的类中
			i。切换首先是一个IOC中的bean，即加入@Component注解
			ii。切换还需要加@Aspect注解
			③在类中声明各种通知
			前置通知
			i。声明一个方法
			ii。在方法前加入@before注解
			iii。可以在通知方法中声明一个类型为 JoinPoint 的参数. 然后就能访问链接细节. 如方法名称和参数值. 

	指定切面的优先级
		在同一个连接点上应用不止一个切面时, 除非明确指定, 否则它们的优先级是不确定的.
		切面的优先级可以通过实现 Ordered 接口或利用 @Order 注解指定.
		实现 Ordered 接口, getOrder() 方法的返回值越小, 优先级越高.
		若使用 @Order 注解, 序号出现在注解中
			@Order(1)
			@Aspect
			@Component
			public class VlidationAspect
		
	重用切入点定义
		在编写 AspectJ 切面时, 可以直接在通知注解中书写切入点表达式. 但同一个切点表达式可能会在多个通知中重复出现.
		在 AspectJ 切面中, 可以通过 @Pointcut 注解将一个切入点声明成简单的方法. 切入点的方法体通常是空的, 因为将切入点定义与应用程序逻辑混在一起是不合理的. 
		切入点方法的访问控制符同时也控制着这个切入点的可见性. 如果切入点要在多个切面中共用, 最好将它们集中在一个公共的类中. 在这种情况下, 它们必须被声明为 public. 在引入这个切入点时, 必须将类名也包括在内. 如果类没有与这个切面放在同一个包中, 还必须包含包名.
		其他通知可以通过方法名称引入该切入点.
			@Pointcut("execution(public int com.johnny.spring.aop.impl.ArithmeticCalculator.*(..))")
			public void declareJointPointExpression(){}
			
			@AfterThrowing(value="declareJointPointExpression()",throwing="e")
			public void afterThrowing(JoinPoint joinPoint, Exception e){
				String methodName = joinPoint.getSignature().getName();
				System.out.println("The method " + methodName + " occurs excetion:" + e);
			}

aop:
	目标需要从spring ioc中获取
	目标要实现接口

Spring Aop Cglib 切没有接口的实现类	
	用kenoAspect去切 A1335_ValidPrize类的中volidVO，doaction方法 
 
	cglib的jar包
    <!-- cglib统计用 -->
    <dependency>
        <groupId>cglib</groupId>
        <artifactId>cglib-nodep</artifactId>
        <version>2.2</version>
        <type>jar</type>
        <scope>compile</scope>
    </dependency>
    <!-- cglib -->
 		
	被代理的类如果没有实现某一接口,在配置文件中加上这句
	<aop:aspectj-autoproxy proxy-target-class="true"  />
	
	