hibernate.cfg.xml：
	Hibernate 配置文件主要用于配置数据库连接和 Hibernate 运行时所需的各种属性
	每个 Hibernate 配置文件对应一个 Configuration 对象
	Hibernate配置文件可以有两种格式:
		hibernate.properties
		hibernate.cfg.xml 

JDBC 连接属性
	connection.url：数据库URL 
	connection.username：数据库用户名
	connection.password：数据库用户密码 
	connection.driver_class：数据库JDBC驱动 
	dialect：配置数据库的方言，根据底层的数据库不同产生不同的 sql 语句，Hibernate 会针对数据库的特性在访问时进行优化
	
C3P0 数据库连接池属性
	1. 在 hibernate 中使用 C3P0 数据源:
	1). 导入 jar 包:
	hibernate-release-4.2.4.Final\lib\optional\c3p0\*.jar
	2). 加入配置:
	hibernate.c3p0.max_size: 数据库连接池的最大连接数
	hibernate.c3p0.min_size: 数据库连接池的最小连接数
	hibernate.c3p0.acquire_increment: 当数据库连接池中的连接耗尽时, 同一时刻获取多少个数据库连接
	hibernate.c3p0.timeout:   数据库连接池中连接对象在多长时间没有使用过后，就应该被销毁
	hibernate.c3p0.idle_test_period:  表示连接池检测线程多长时间检测一次池内的所有链接对象是否超时. 
	连接池本身不会把自己从连接池中移除，而是专门有一个线程按照一定的时间间隔来做这件事，
	这个线程通过比较连接对象最后一次被使用时间和当前时间的时间差来和 timeout 做对比，进而决定是否销毁这个连接对象。 
	hibernate.c3p0.max_statements:  缓存 Statement 对象的数量
	
其他
	show_sql：是否将运行期生成的SQL输出到日志以供调试。取值 true | false 
	format_sql：是否将 SQL 转化为格式良好的 SQL . 取值 true | false
	hibernate.jdbc.fetch_size：
		实质是调用 Statement.setFetchSize() 方法设定 JDBC 的 Statement 读取数据的时候每次从数据库中取出的记录条数。
		例如一次查询1万条记录，对于Oracle的JDBC驱动来说，是不会 1 次性把1万条取出来的，而只会取出 fetchSize 条数，当结果集遍历完了这些记录以后，再去数据库取 fetchSize 条数据。
		因此大大节省了无谓的内存消耗。Fetch Size设的越大，读数据库的次数越少，速度越快；Fetch Size越小，读数据库的次数越多，速度越慢。
		Oracle数据库的JDBC驱动默认的Fetch Size = 10，是一个保守的设定，根据测试，当Fetch Size=50时，性能会提升1倍之多，当 fetchSize=100，性能还能继续提升20%，
		Fetch Size继续增大，性能提升的就不显著了。
		*并不是所有的数据库都支持Fetch Size特性，例如MySQL就不支持
	hibernate.jdbc.batch_size：
		设定对数据库进行批量删除，批量更新和批量插入的时候的批次大小，类似于设置缓冲区大小的意思。batchSize 越大，批量操作时向数据库发送sql的次数越少，速度就越快。
		测试结果是当Batch Size=0的时候，使用Hibernate对Oracle数据库删除1万条记录需要25秒，Batch Size = 50的时候，删除仅仅需要5秒！
		Oracle数据库 batchSize=30 的时候比较合适。

	hbm2ddl.auto：该属性可帮助程序员实现正向工程, 即由 java 代码生成数据库脚本, 进而生成具体的表结构. 。取值 create | update | create-drop | validate
		create : 会根据 .hbm.xml  文件来生成数据表, 但是每次运行都会删除上一次的表 ,重新生成表, 哪怕二次没有任何改变 
		create-drop : 会根据 .hbm.xml 文件生成表,但是SessionFactory一关闭, 表就自动删除 
		update : 最常用的属性值，也会根据 .hbm.xml 文件生成表, 但若 .hbm.xml  文件和数据库中对应的数据表的表结构不同, Hiberante  将更新数据表结构，但不会删除已有的行和列 
		validate : 会和数据库中的表进行比较, 若 .hbm.xml 文件中的列在数据表中不存在，则抛出异常
		
	connection.isolation
		设置 Hibernate 的事务隔离级别
		1. READ UNCOMMITED
		2. READ COMMITED
		4. REPEATABLE READ
		8. SERIALIZEABLE
	use_identifier_rollback	: 为true删除对象后, 使其 OID 置为 null ，默认为false
