》**org.hibernate.HibernateException: No Session found for current thread
	
	SessionFactory的getCurrentSession并不能保证在没有当前Session的情况下会自动创建一个新的，这取决于CurrentSessionContext的实现，
	SessionFactory将调用CurrentSessionContext的currentSession()方法来获得Session。

	然而，产生以上异常的原因在于Spring提供了自己的CurrentSessionContext实现，如果我们不打算使用Spring，而是自己直接从hibernate.cfg.xml创建SessionFactory，
	并且为在hibernate.cfg.xml中设置current_session_context_class为thread，也即使用了ThreadLocalSessionContext，
	那么我们在调用getCurrentSession()时，如果当前线程没有Session存在，则会创建一个绑定到当前线程。	
	
	Solution：	- 单独使用hibernate
	在 hibernate 的配置文件中，也可以增加这样的配置来避免这个错误:	
	<property name="current_session_context_class">thread</property>
	
	在单独使用hibernate时，总是会加上这项配置，但spring与hibernate结合时，千万不能加上这句话，我猜测出错原因是事务管理器中的session和当前拿到的session不是同一个session，
	事务管理器中拿到的session开启了事务，但当前得到的session并没有开启事务，导致出错
		Exception in thread "main" org.hibernate.HibernateException: save is not valid without active transaction
		<prop key="hibernate.current_session_context_class">thread</prop>  
		
	Solution:	- spring 与 hibernate集成
		at org.springframework.orm.hibernate4.SpringSessionContext.currentSession(SpringSessionContext.java:106)
		在Spring中，如果我们在没有配置TransactionManager,并且没有事先调用SessionFactory.openSession()的情况直接调用getCurrentSession()，
		那么程序将抛出“No Session found for current thread”异常。
		如果配置了TranactionManager并且通过@Transactional或者声明的方式配置的事务边界，那么Spring会在开始事务之前通过AOP的方式为当前线程创建Session，
		此时调用getCurrentSession()将得到正确结果。
		
		getCurrentSession 调用的service需要添加事物，可以使声明式或者注解
		
>	question:
	org.hibernate.MappingException: Unknown entity: com.johnny.monitor.access.vo.SystemGroupVO
	at org.hibernate.internal.SessionFactoryImpl.getEntityPersister(SessionFactoryImpl.java:1146)
	Solution:
	1.配置实体类时为@Entity导包时 错误的导入了 import org.hibernate.annotations.Entity 应该更改为import javax.persistence.Entity; 
	2.另外有些报org.hibernate.MappingException: Unknown entity,可能是没有在cfg文件中加入 *.hbm.xml造成的
	
>	[Hibernate框架]Hql语句in中带参数的写法发生异常：ljava.lang.Integer cannot be cast to java.lang.Integer
	String hql = "FROM Login login WHERE login.id in(:ids)";
	Map<String,Object> map = new HashMap<String,Object>();
	Integer[] ids = new Integer[]{1,2,3};
	map.put("ids",ids);
	List<Login> lstLogin = (List<Login>)xxxDao.findByHql(hql,map,0,0);
	
	也就是说hibernate把ids这个参数当做一个Integer对象了而不是一个集合。
	原来对hibernate中setParameter这个方法还不熟悉:Query接口提供了多种传递参数的方法，可以是传单独参数，也可以传集合，如下图
	也就是说，前面使用数组集合的话则必须调用setParameterList方法。
	那么改一下Dao层的setParameter方法即可达到通用了：
	private Query setParameter(Query query, Map<String, Object> map) {
		if (map != null) {
			Set<String> keySet = map.keySet();
			for (String string : keySet) {
				Object obj = map.get(string);
				//这里考虑传入的参数是什么类型，不同类型使用的方法不同
				if(obj instanceof Collection<?>){
					query.setParameterList(string, (Collection<?>)obj);
				}else if(obj instanceof Object[]){
					query.setParameterList(string, (Object[])obj);
				}else{
					query.setParameter(string, obj);
				}
			}
		}
		return query;
	}
