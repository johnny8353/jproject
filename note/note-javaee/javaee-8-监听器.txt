http://www.cnblogs.com/xdp-gacl/p/3969249.html
基本概念
　　	JavaWeb中的监听器是Servlet规范中定义的一种特殊类，它用于监听web应用程序中的ServletContext, HttpSession和 ServletRequest等域对象的创建与销毁事件，
	以及监听这些域对象中的属性发生修改的事件。

Servlet 监听器的分类
	在Servlet规范中定义了多种类型的监听器，它们用于监听的事件源分别为ServletContext，HttpSession和ServletRequest这三个域对象
	Servlet规范针对这三个对象上的操作，又把多种类型的监听器划分为三种类型：
		监听域对象自身的创建和销毁的事件监听器
		监听域对象中的属性的增加和删除的事件监听器
		监听绑定到 HttpSession 域中的某个对象的状态的事件监听器

编写 Servlet 监听器
	⊙Servlet 规范为每种事件监听器都定义了相应的接口，开发人员编写的事件监听器程序只需实现这些接口，web 服务器根据用户编写的事件监听器所实现的接口把它注册到相应的被监听对象上
	⊙一些 Servlet 事件监听器需要在 web 应用程序的 web.xml 文件中进行注册，一个 web.xml 文件中可以注册多个 Servlet 事件监听器，
	web 服务器按照它们在 web.xml 文件中的注册顺序来加载和注册这些 Serlvet 事件监听器。
	⊙Serlvet 事件监听器的注册和调用过程都是由 web 容器自动完成的，当发生被监听的对象被创建，修改或销毁事件时，web容器将调用与之相关的 Servlet 事件监听器对象的相关方法，
	开发人员在在这些方法中编写的事件处理代码即被执行
	⊙由于一个 web 应用程序只会为每个事件监听器创建一个对象，有可能出现多个线程同时调用同一个事件监听器对象的情况，所以，在编写事件监听器类时，应考虑多线程安全的问题

监听域对象的创建和销毁
	域对象创建和销毁的事件监听器就是用来监听 ServletContext, HttpSession, HttpServletRequest 这三个对象的创建和销毁事件的监听器。
	域对象的创建和销毁时机
		对象					创建											销毁
		ServletContext		服务器启动针对每一个Web应用创建ServletContext			服务器关闭前先关闭代表每一个web应用的ServletContext
		HttpSession			浏览器开始与服务器建立会话是创建						调用了HttpSession.invalidate;超过了设置的session最大有效时间;服务器进程停止了。
		ServletRequest		用户每一次访问都会创建request对象					当前访问结束，request对象就会销毁
			
	ServletContextListener 接口
		ServletContextListener 接口用于监听 ServletContext 对象的创建和销毁事件。实现了ServletContextListener接口的类都可以对ServletContext对象的创建和销毁进行监听。
			当 ServletContext 对象被创建时，激发contextInitialized (ServletContextEvent sce)方法
			当 ServletContext 对象被销毁时，激发contextDestroyed(ServletContextEvent sce)方法
		ServletContext域对象创建和销毁时机：
		　　　　创建：服务器启动针对每一个Web应用创建ServletContext
		　　　　销毁：服务器关闭前先关闭代表每一个web应用的ServletContext
		
		范例：编写一个MyServletContextListener类，实现ServletContextListener接口，监听ServletContext对象的创建和销毁
	
			public class MyServletContextListener implements ServletContextListener {
			
			    @Override
			    public void contextInitialized(ServletContextEvent sce) {
			        System.out.println("ServletContext对象创建");
			    }
			    @Override
			    public void contextDestroyed(ServletContextEvent sce) {
			        System.out.println("ServletContext对象销毁");
			    }
			}
			
		  	<!-- 注册针对ServletContext对象进行监听的监听器 -->
		  	<listener>
		      	<description>ServletContextListener监听器</description>
		      	<!--实现了ServletContextListener接口的监听器类 -->
		      	<listener-class>com.johnny.javaweb.listener.MyServletContextListener</listener-class>
		  	</listener>
	
		　	经过这两个步骤，我们就完成了监听器的编写和注册，Web服务器在启动时，就会自动把在web.xml中配置的监听器注册到ServletContext对象上，
			这样开发好的MyServletContextListener监听器就可以对ServletContext对象进行监听了。
			
	HttpSessionListener 接口
		
		HttpSessionListener 接口用于监听HttpSession对象的创建和销毁
			创建一个Session时，激发sessionCreated(HttpSessionEvent se) 方法
			销毁一个Session时，激发sessionDestroyed (HttpSessionEvent se) 方法。 
		HttpSession域对象创建和销毁时机：
		　　　创建：浏览器开始与服务器建立会话是创建
		　　　销毁：调用了HttpSession.invalidate;超过了设置的session最大有效时间;服务器进程停止了。
		范例：编写一个MyHttpSessionListener类，实现HttpSessionListener接口，监听HttpSession对象的创建和销毁
		
	ServletRequestListener接口 
		ServletRequestListener 接口用于监听ServletRequest 对象的创建和销毁
			创建一个ServletRequest 对象时，激发requestInitialized(ServletRequestEvent sre)方法
			销毁一个Session时，激发requestDestroyed(ServletRequestEvent sre)方法。
		ServletRequest域对象创建和销毁时机：
		　　　创建：用户每一次访问都会创建request对象
		　　　销毁：当前访问结束，request对象就会销毁
		范例：编写一个MyServletRequestListener类，实现ServletRequestListener接口，监听ServletRequest对象的创建和销毁
	
域对象中属性的变更的事件监听器
	⊙域对象中属性的变更的事件监听器就是用来监听 ServletContext, HttpSession, HttpServletRequest 这三个对象中的属性变更信息事件的监听器。
	⊙这三个监听器接口分别是ServletContextAttributeListener, HttpSessionAttributeListener 和ServletRequestAttributeListener，
	这三个接口中都定义了三个方法来处理被监听对象中的属性的增加，删除和替换的事件，同一个事件在这三个接口中对应的方法名称完全相同，只是接受的参数类型不同 
	
	attributeAdded 方法
		当向被监听器对象中增加一个属性时，web容器就调用事件监听器的 attributeAdded 方法进行相应，这个方法接受一个事件类型的参数，
		监听器可以通过这个参数来获得正在增加属性的域对象和被保存到域中的属性对象
		各个域属性监听器中的完整语法定义为：
			public void attributeAdded(ServletContextAttributeEvent scae) 
			public void attributeAdded(HttpSessionBindingEvent  hsbe) 
			public void attributeAdded(ServletRequestAttributeEvent srae)
	
	attributeRemoved 方法
		当删除被监听对象中的一个属性时，web 容器调用事件监听器的这个方法进行相应
		各个域属性监听器中的完整语法定义为：
			public void attributeRemoved(ServletContextAttributeEvent scae) 
			public void attributeRemoved (HttpSessionBindingEvent  hsbe) 
			public void attributeRemoved (ServletRequestAttributeEvent srae)
		
	attributeReplaced 方法
		当监听器的域对象中的某个属性被替换时，web容器调用事件监听器的这个方法进行相应
		各个域属性监听器中的完整语法定义为：
			public void attributeReplaced(ServletContextAttributeEvent scae) 
			public void attributeReplaced (HttpSessionBindingEvent  hsbe) 
			public void attributeReplaced (ServletRequestAttributeEvent srae)
			
感知 Session 绑定的事件监听器
	⊙保存在 Session 域中的对象可以有多种状态：
		绑定到  Session 中；
		从 Session 域中解除绑定；
		随 Session 对象持久化到一个存储设备中；
		随 Session 对象从一个存储设备中恢复
	⊙Servlet 规范中定义了两个特殊的监听器接口来帮助 JavaBean 对象了解自己在 Session 域中的这些状态：
		HttpSessionBindingListener接口和HttpSessionActivationListener接口 ，实现这两个接口的类不需要 web.xml 文件中进行注册
	HttpSessionBindingListener接口	-	典型应用：统计当前在线人数列表
		⊙实现了HttpSessionBindingListener接口的 JavaBean 对象可以感知自己被绑定到 Session 中和从 Session 中删除的事件
		⊙当对象被绑定到 HttpSession 对象中时，web 服务器调用该对象的  void valueBound(HttpSessionBindingEvent event) 方法
		⊙当对象从 HttpSession 对象中解除绑定时，web 服务器调用该对象的 void valueUnbound(HttpSessionBindingEvent event)方法
	
	HttpSessionActivationListener接口
		⊙实现了HttpSessionBindingListener接口的 JavaBean 对象可以感知自己被活化和钝化的事件
		⊙当绑定到 HttpSession 对象中的对象将要随 HttpSession 对象被钝化之前，web 服务器调用该对象的  void sessionWillPassivate(HttpSessionBindingEvent event) 方法
		⊙当绑定到 HttpSession 对象中的对象将要随 HttpSession 对象被活化之后，web 服务器调用该对象的 void sessionDidActive(HttpSessionBindingEvent event)方法
		
			
		
