1. 部署并启动 tomcat 服务器.
	1). 解压 apache-tomcat-6.0.16.zip 到一个非中文目录下
	2). 配置一个环境变量. java_home(指向 JDK 安装的根目录) 或 jre_home
	3). 通过双击 apache-tomcat-6.0.16\bin 目录下的 startup.bat, 启动服务器
	4). 可以在浏览器中输入 localhost:8080 来检验 Tomcat 安装是否正确. 
	5). 若已经启动了一个 Tomcat 应用, 若再启动同一个 Tomcat 应用, 会抛出异常:  
	java.net.BindException: Address already in use: JVM_Bind:8080
	因为端口已经被占用了.

如果在一台机子启动多个Tomcat服务器
	拷贝一份免安装版tomcat，路径重命名为D:\apache-tomcat-5.5.23-bugfix
	修改server.conf文件
		修改HTTP/1.1端口号8080改成8090。
		修改Server端口号8005改成8006
		修改AJP/1.3端口号8009改为8010。


2. Tomcat: 开源的 Servlet 容器. 

3. 可以通过修改 server.xml 文件中的配置信息来修改 Tomcat 服务器的端口号:

	<Connector port="8989" protocol="HTTP/1.1" 
	           connectionTimeout="20000" 
	           redirectPort="8443" />
	           
	把 port 的值改为其他的端口号即可.

4. 为了可以在任意目录下启动 Tomcat 服务器
	4.1 把 D:\apache-tomcat-6.0.16\bin 添加到 path 下
	
	添加成功后, 若在任意目录下通过 startup 启动 Tomcat 服务器, 会有提示:
	
	The CATALINA_HOME environment variable is not defined correctly
	This environment variable is needed to run this program
	
	即: 要求设置 CATALINA_HOME 这个环境变量

5. 设置 CATALINA_HOME 环境变量:
	5.1 通过阅读 startup.bat 批处理文件, 可知 CATALINA_HOME 环境变量下有一个 bin 目录,
	而 bin 目录又有一个 catalina.bat 文件, 由此可知 CATALINA_HOME 指向的应该是 Tomcat 
	安装的根目录
	
	于是把 Tomcat 的根目录设为 CATALINA_HOME 环境变量. 
	
	此时即可以在 任意 目录下通过 startup.bat、shutdown.bat 启动、关闭 Tomcat 服务器. 

6. 继续阅读 startup.bat 文件， 发现启动 tomcat 服务器的是 catalina.bat 文件

	在命令行窗口直接输入 catalina, 提示如下:
	
	  commands:
	  debug             Start Catalina in a debugger
	  debug -security   Debug Catalina with a security manager
	  jpda start        Start Catalina under JPDA debugger
	  run               Start Catalina in the current window
	  run -security     Start in the current window with security manager
	  start             Start Catalina in a separate window
	  start -security   Start in a separate window with security manager
	  stop              Stop Catalina
	  version           What version of tomcat are you running?
	  
	catalina 命令有如上的可选参数.
	
	run: 在 catalina 同一个命令行窗口下启动服务器. 
	start: 开启一个新窗口启动服务器
	stop: 关闭服务器.

7. 第一个 WEB 应用程序: 开发, 并部署到 Tomcat 服务器下运行
	
	1). 在 Eclipse 新建一个 Java Project
	2). 在 Java 项目下创建 WEB 开发的目录结构
	
	 -WebContent
	 	-WEB-INF
			-classes (编译后的 class 文件必须放在该目录下.)
			-lib
			-web.xml (从 apache-tomcat-6.0.16\webapps\docs\WEB-INF 中复制过来,
			可以不做修改)
		html 页面
		JSP 页面
		图片...
			
	3). 在 src 下新建一个 Person 类
	
	package com.johnny.test;
	
	public class Person {
	
		public String getPersonInfo(){
			return "person info...";
		}
	
	}
	
	4). 手工的 Person 类对应的 class 文件(含包)复制到 classes 目录下
	
	可以通过修改默认的输出目录达到自动把编译好的 class 放到 classes 目录下:
	
	5). 在 WebContent 目录下新建一个 JSP 文件:
	
	<%@page import="com.johnny.test.Person"%>
	<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	    pageEncoding="ISO-8859-1"%>
	
	
	<% 
		Person person = new Person();
		System.out.print(person.getPersonInfo()); 
	%>
	
	6). 把 WebContent 目录复制到 Tomcat 的 webapps 目录下, 并改名为: helloworld
	
	7). 在浏览器的地址栏中输入: http://localhost:8989/helloworld/hello.jsp 即可
	看到命令行的打印信息
	
	8). 配置任意目录下的Web应用程序:
	在 conf 目录下依次创建 catalina\localhost 目录，然后在 localhost 目录下为 test 
	这个Web应用程序建立 test.xml 文件，编辑这个文件输入以下内容
	
	<?xml version="1.0" encoding="UTF-8"?>
	<Context 
	docBase="E:\\Java\\Source\\johnny\\java-1\\firstWebApp\\WebContent" 
	reloadable="true"/> 

8. Tomcat部署的方式
	1.直接把项目复制到Tomcat安装目录的webapps目录中，这是最简单的一种Tomcat项目部署的方法，也是初学者最常用的方法。
	
	2.在tomcat安装目录中有一个conf文件夹，打开此文件夹，其中包含配置文件server.xml，打开配置文件，并在<host>和</host>之间插入如下语句。
	<Context    path="/hello"   docBase="F:\eclipse3.2\workspace\hello\WebRoot"     debug="0"    privileged="true">      </Context>
	
	其中，docBase为设置项目的路径。
	
	3.在conf目录中，在Catalina\localhost（此处需要注意目录的大小写）目录下新建一个XML文件，任意命名，只要和当前文件中的文件名不重复即可。
	http://localhost:8090/johnny/pages/jquery/index.jsp 最终访问的路径为为xml的文件名，而不是path名称
	代码如下。
	<Context    path="/hello"   docBase="D:\eclipse3.2\workspace\hello\WebRoot"     debug="0"    privileged="true">      </Context>
	
	带有数据源的配置方式
	<Context path="/msm" docBase="D:\code\msmweb\code\MSM_CJ101_Frame\webApplication" workDir="" >
		<Resource auth="Container"
		driverClassName="oracle.jdbc.driver.OracleDriver" 
		name="jdbc/eccTaskDatasource" 
		password="test_120921" 
		type="javax.sql.DataSource" url="jdbc:oracle:thin:@10.5.6.80:1521:eccsys2" 
		username="ecc" maxIdle="4" 
		maxActive="20" maxWait="5000"/> 
	</Context>
	
	第三种方法相对来说比较灵活，并且可以设置别名。通过在tomcat的conf/Catalina/localhost目录下添加配置文件，来发布项目，是最佳选择。
	因为这样对tomcat的入侵性最小，只需要新增一个配置文件，不需要修改原有配置；而且支持动态解析，修改完代码直接生效(修改配置除外)。
	
tomcat加密去掉了等号
	在 catalina.properties 中增加 ，加密解密
	org.apache.tomcat.util.http.ServerCookie.ALLOW_EQUALS_IN_VALUE=true
	org.apache.tomcat.util.http.ServerCookie.ALLOW_HTTP_SEPARATORS_IN_V0=true


Tomcat内存设置详解
	一、常见的Java内存溢出有以下三种：
		1. java.lang.OutOfMemoryError: Java heap space ----JVM Heap（堆）溢出
			JVM在启动的时候会自动设置JVM Heap的值，其初始空间(即-Xms)是物理内存的1/64，最大空间(-Xmx)不可超过物理内存。
			可以利用JVM提供的-Xmn -Xms -Xmx等选项可进行设置。Heap的大小是Young Generation 和Tenured Generaion 之和。
			在JVM中如果98％的时间是用于GC，且可用的Heap size 不足2％的时候将抛出此异常信息。
			解决方法：手动设置JVM Heap（堆）的大小。  
			 
		2. java.lang.OutOfMemoryError: PermGen space  ---- PermGen space溢出。 
			PermGen space的全称是Permanent Generation space，是指内存的永久保存区域。
			为什么会内存溢出，这是由于这块内存主要是被JVM存放Class和Meta信息的，Class在被Load的时候被放入PermGen space区域，它和存放Instance的Heap区域不同,sun的 GC不会在主程序运行期对PermGen space进行清理，所以如果你的APP会载入很多CLASS的话，就很可能出现PermGen space溢出。
			解决方法： 手动设置MaxPermSize大小
			 
		3. java.lang.StackOverflowError   ---- 栈溢出
			栈溢出了，JVM依然是采用栈式的虚拟机，这个和C和Pascal都是一样的。函数的调用过程都体现在堆栈和退栈上了。
			调用构造函数的 “层”太多了，以致于把栈区溢出了。
			通常来讲，一般栈区远远小于堆区的，因为函数调用过程往往不会多于上千层，而即便每个函数调用需要 1K的空间(这个大约相当于在一个C函数内声明了256个int类型的变量)，那么栈区也不过是需要1MB的空间。通常栈的大小是1－2MB的。
			通常递归也不要递归的层次过多，很容易溢出。
			解决方法：修改程序。
				
	二、解决方法
	 
	在生产环境中tomcat内存设置不好很容易出现jvm内存溢出。
		 
		1、 linux下的tomcat：  
			修改TOMCAT_HOME/bin/catalina.sh 
			位置cygwin=false前。
		**	JAVA_OPTS="-server -Xms2048m -Xmx2048m -XX:PermSize=128M -XX:MaxPermSize=256m" 
		 
		2、 如果tomcat 5 注册成了windows服务，以services方式启动的，则需要修改注册表中的相应键值。
			修改注册表HKEY_LOCAL_MACHINE\SOFTWARE\Apache Software Foundation\Tomcat Service Manager\Tomcat5\Parameters\Java，右侧的Options
			原值为
			-Dcatalina.home="C:\ApacheGroup\Tomcat 5.0"
			-Djava.endorsed.dirs="C:\ApacheGroup\Tomcat 5.0\common\endorsed"
			-Xrs
			加入 -Xms256m -Xmx512m 
			重起tomcat服务,设置生效
		 
		3、如果tomcat 6 注册成了windows服务，或者windows2003下用tomcat的安装版，
			在/bin/tomcat6w.exe里修改就可以了 。
	 
	 
		4、 如果要在myeclipse中启动tomcat，上述的修改就不起作用了，可如下设置：
			Myeclipse->preferences->myeclipse->servers->tomcat->tomcat×.×->JDK面板中的
			Optional Java VM arguments中添加：-Xms256m -Xmx512m -XX:PermSize=64M -XX:MaxPermSize=128m
	
	三、jvm参数说明：
		-server:一定要作为第一个参数，在多个CPU时性能佳 
		-Xms：java Heap初始大小。 默认是物理内存的1/64。
		-Xmx：java heap最大值。建议均设为物理内存的一半。不可超过物理内存。
			如果-Xmx不指定或者指定偏小，应用可能会导致java.lang.OutOfMemory错误，此错误来自JVM不是Throwable的，无法用try...catch捕捉。
		-XX:PermSize:设定内存的永久保存区初始大小，缺省值为64M。（我用visualvm.exe查看的）
		-XX:MaxPermSize:设定内存的永久保存区最大 大小，缺省值为64M。（我用visualvm.exe查看的）
			PermSize和MaxPermSize指明虚拟机为java永久生成对象（Permanate generation）如，class对象、方法对象这些可反射（reflective）对象分配内存限制，
			这些内存不包括在Heap（堆内存）区之中。
			MaxPermSize缺省值和-server 
				-client选项相关。
				-server选项下默认MaxPermSize为64m
				-client选项下默认MaxPermSize为32m
				
		**要注意的是 最大堆内存与最大非堆内存的和绝对不能够超出操作系统的可用内存。		
		
		其他参数
		-XX:SurvivorRatio=2  :生还者池的大小,默认是2，如果垃圾回收变成了瓶颈，您可以尝试定制生成池设置
		-XX:NewSize: 新生成的池的初始大小。 缺省值为2M。
		-XX:MaxNewSize: 新生成的池的最大大小。   缺省值为32M。
		如果 JVM 的堆大小大于 1GB，则应该使用值：-XX:newSize=640m -XX:MaxNewSize=640m -XX:SurvivorRatio=16，
		或者将堆的总大小的 50% 到 60% 分配给新生成的池。调大新对象区，减少Full GC次数。
		 
		+XX:AggressiveHeap 会使得 Xms没有意义。这个参数让jvm忽略Xmx参数,疯狂地吃完一个G物理内存,再吃尽一个G的swap。 
		-Xss：每个线程的Stack大小，“-Xss 15120” 这使得JBoss每增加一个线程（thread)就会立即消耗15M内存，而最佳值应该是128K,默认值好像是512k. 
		
		-verbose:gc 现实垃圾收集信息 
		-Xloggc:gc.log 指定垃圾收集日志文件 
		-Xmn：young generation的heap大小，一般设置为Xmx的3、4分之一 
		-XX:+UseParNewGC ：缩短minor收集的时间 
		-XX:+UseConcMarkSweepGC ：缩短major收集的时间 此选项在Heap Size 比较大而且Major收集时间较长的情况下使用更合适。
		-XX:userParNewGC 可用来设置并行收集【多CPU】
		-XX:ParallelGCThreads 可用来增加并行度【多CPU】
		-XX:UseParallelGC 设置后可以使用并行清除收集器【多CPU】
		
另一观点

	在做java开发时尤其是大型软件开发时经常会遇到内存溢出的问题，比如说OutOfMemoryError等。这是个让开发人员很痛苦、也很纠结的问题，因为我们有时不知道什么样的操作导致了这种问题的发生。
	所以我们不得不通过不断的优化自己的代码结构，重构了一次又一次。虽然说不断的重构自己的代码对公对私都是一件非常好的事，但是有时我们会发现有些时候不单单是通过重构自身的代码就能够解决这样
	的问题，因为也可能是由于我们对java虚拟机运行时的内存分配的不得当导致了内存溢出现象的不断发生。为了解决这一问题，java开发团队提供了一个用户自定义的方式按需配置java虚拟机运行时的所
	需的内存——通过参数配置的形式实现参数分配自定义化。
	在解析如何通过参数来配置JVM运行时内存分配之前，要说明一下JVM运行时内存的格局。JVM按照其存储数据的内容将所需内存分配为堆区与非堆区两个部分：所谓堆区即为通过new的方式创建的对象
	（类实例）所占用的内存空间；非堆区即为代码、常量、外部访问（如文件访问流所占资源）等。然而虽然java的垃圾回收机制虽然能够很好的解决内存浪费的问题，但是这种机制也仅仅的是回收堆区的
	资源，而对于非堆区的资源就束手无策了，针对这样的资源回收只能凭借开发人员自身的约束来解决。就算是这样（堆区有java回收机制、非堆区开发人员能够很好的解决），当运行时所需内存瞬间激增
	的时候JVM无奈的也要中止程序的运行。
	首先，常见参数种类（配置内存）：（-Xms 、-Xmx、-XX:newSize、-XX:MaxnewSize、-Xmn）、（-XX:PermSize、-XX:MaxPermSize）。
	可以从列举的方式上看出我的用意，参数的配置是分组的，前者是用来配置堆区的，后者是用来配置非堆区的。
		第一组配置参数：-Xms 、-Xmx、-XX:newSize、-XX:MaxnewSize、-Xmn
        1、-Xms ：表示java虚拟机堆区内存初始内存分配的大小，通常为操作系统可用内存的1/64大小即可，但仍需按照实际情况进行分配。有可能真的按照这样的一个规则分配时，设计出的软件还没有能够运行得起来就挂了。
        2、-Xmx： 表示java虚拟机堆区内存可被分配的最大上限，通常为操作系统可用内存的1/4大小。但是开发过程中，通常会将 -Xms 与 -Xmx两个参数的配置相同的值，其目的是为了能够在java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源。
        一般来讲对于堆区的内存分配只需要对上述两个参数进行合理配置即可，但是如果想要进行更加精细的分配还可以对堆区内存进一步的细化，那就要用到下面的三个参数了-XX:newSize、-XX:MaxnewSize、-Xmn。当然这源于对堆区的进一步细化分：新生代、中生代、老生代。java中每新new一个对象所占用的内存空间就是新生代的空间，当java垃圾回收机制对堆区进行资源回收后，那些新生代中没有被回收的资源将被转移到中生代，中生代的被转移到老生代。而接下来要讲述的三个参数是用来控制新生代内存大小的。
        1、-XX:newSize：表示新生代初始内存的大小，应该小于 -Xms的值；
        2、-XX:MaxnewSize：表示新生代可被分配的内存的最大上限；当然这个值应该小于 -Xmx的值；
        3、-Xmn：至于这个参数则是对 -XX:newSize、-XX:MaxnewSize两个参数的同时配置，也就是说如果通过-Xmn来配置新生代的内存大小，那么-XX:newSize = -XX:MaxnewSize = -Xmn，虽然会很方便，但需要注意的是这个参数是在JDK1.4版本以后才使用的。
         上面所述即为java虚拟机对外提供的可配置堆区的参数，
		
		java虚拟机对非堆区内存配置的两个参数：
        1、-XX:PermSize：表示非堆区初始内存分配大小，其缩写为permanent size（持久化内存）
        2、-XX:MaxPermSize：表示对非堆区分配的内存的最大上限。
        这里面非常要注意的一点是：在配置之前一定要慎重的考虑一下自身软件所需要的非堆区内存大小，因为此处内存是不会被java垃圾回收机制进行处理的地方。
		*并且更加要注意的是 最大堆内存与最大非堆内存的和绝对不能够超出操作系统的可用内存。
